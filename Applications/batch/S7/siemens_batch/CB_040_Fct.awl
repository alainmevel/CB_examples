FUNCTION_BLOCK FB 40
TITLE = 'CPU1_M_mode'
AUTHOR : CB


VAR_INPUT
	powerUp : BOOL := FALSE;	//
	emergencyStop : BOOL := FALSE;	//
	manualSwitch : BOOL := FALSE;	//
	autoSwitch : BOOL := FALSE;	//
	startCyclePB : BOOL := FALSE;	//
	endCyclePB : BOOL := FALSE;	//
	acknowledgePB : BOOL := FALSE;	//
	cycleEnd : BOOL := FALSE;	//
	generalFault : BOOL := FALSE;	//
END_VAR

VAR_OUTPUT
	live : BOOL := FALSE;	//
	autoMode : BOOL := FALSE;	//
	manualMode : BOOL := FALSE;	//
	cycleInProgress : BOOL := FALSE;	//
	endCycleRequest : BOOL := FALSE;	//
END_VAR

VAR
	emergencyStopState : BOOL := FALSE;	//
	tmp0_0 : BOOL;
	tmp0_1 : BOOL;
	tmp0_2 : BOOL;
	tmp0_3 : BOOL;
	tmp0_4 : BOOL;
END_VAR

BEGIN


NETWORK
TITLE = 
//Power up
L1:	A	powerUp;
FP	tmp0_0;
=	tmp0_1;

A	tmp0_1;
AN	live;
=	L0.0;

NETWORK
TITLE = 
//
A	tmp0_1;
A	live;
=	L0.1;

NETWORK
TITLE = 
//

NETWORK
TITLE = 
//
A	L0.1;
R	tmp0_2;
A	L0.0;
S	tmp0_2;
A	tmp0_2;
=	live;




NETWORK
TITLE = 
//Operating modes management
L2:	AN	emergencyStop;
S	emergencyStopState;

NETWORK
TITLE = 
//Operating modes management
A	acknowledgePB;
FN	tmp0_3;
=	tmp0_4;


NETWORK
TITLE = 
//
A	tmp0_4;
A	emergencyStop;
R	emergencyStopState;

NETWORK
TITLE = 
//Operating modes management
A	live;
AN	generalFault;
AN	emergencyStopState;
A	autoSwitch;
AN	manualSwitch;
=	autoMode;

NETWORK
TITLE = 
//Operating modes management
A	live;
AN	generalFault;
AN	emergencyStopState;
AN	autoSwitch;
A	manualSwitch;
=	manualMode;




NETWORK
TITLE = 
//Working cycle
L3:	A(	;
O	cycleInProgress;
O	;
A	startCyclePB;
AN	cycleEnd;
)	;
A	autoMode;
=	cycleInProgress;

NETWORK
TITLE = 
//Working cycle
A(	;
O	endCyclePB;
O	;
A	endCycleRequest;
A	cycleInProgress;
)	;
=	endCycleRequest;





END_FUNCTION_BLOCK
