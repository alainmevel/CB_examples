        -:    0:Source:bottle_cov.c
        -:    0:Graph:MinGW/bottle_cov.gcno
        -:    0:Data:MinGW/bottle_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:40-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * bottle_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "bottle.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index bottle__num = 0;
        -:   20:CB_Mem_Bool *bottle_pulseGenerator;
        -:   21:CB_Mem_Bool *bottle_loading;
        -:   22:CB_Mem_Bool *bottle_evacuation;
        -:   23:CB_Mem_Float *bottle_inputFlow;
        -:   24:CB_Mem_Bool *bottle_bottleFilled;
        -:   25:CB_Mem_Bool *bottle_bottlePresent;
        -:   26:CB_Mem_Bool *bottle_existenceOfBottle1;
        -:   27:CB_Mem_Bool *bottle_existenceOfBottle2;
        -:   28:CB_Mem_Bool *bottle_existenceOfBottle3;
        -:   29:CB_Mem_Float *bottle_levelOfBottle1;
        -:   30:CB_Mem_Float *bottle_levelOfBottle2;
        -:   31:CB_Mem_Float *bottle_levelOfBottle3;
        -:   32:CB_Mem_Int *bottle_positionOfBottle1;
        -:   33:CB_Mem_Int *bottle_positionOfBottle2;
        -:   34:CB_Mem_Int *bottle_positionOfBottle3;
        -:   35:CB_Mem_Bool *bottle_edge_loading;
        -:   36:CB_Mem_Bool *bottle_edge_evacuation;
        -:   37:CB_Mem_Bool *bottle_edge_pulseGenerator;
        -:   38:CB_Mem_Bool *bottle_first;
        -:   39:CB_Mem_Float *bottle_maxLevel;
        -:   40:CB_Mem_Int *bottle_increment;
        -:   41:
        -:   42:/**************************** Variables *****************************/
        -:   43:
        -:   44:#define pulseGenerator (bottle_pulseGenerator->CB_current_value)
        -:   45:#define loading (bottle_loading->CB_current_value)
        -:   46:#define evacuation (bottle_evacuation->CB_current_value)
        -:   47:#define inputFlow (bottle_inputFlow->CB_current_value)
        -:   48:#define bottleFilled (bottle_bottleFilled->CB_current_value)
        -:   49:#define bottlePresent (bottle_bottlePresent->CB_current_value)
        -:   50:#define existenceOfBottle1 (bottle_existenceOfBottle1->CB_current_value)
        -:   51:#define existenceOfBottle2 (bottle_existenceOfBottle2->CB_current_value)
        -:   52:#define existenceOfBottle3 (bottle_existenceOfBottle3->CB_current_value)
        -:   53:#define levelOfBottle1 (bottle_levelOfBottle1->CB_current_value)
        -:   54:#define levelOfBottle2 (bottle_levelOfBottle2->CB_current_value)
        -:   55:#define levelOfBottle3 (bottle_levelOfBottle3->CB_current_value)
        -:   56:#define positionOfBottle1 (bottle_positionOfBottle1->CB_current_value)
        -:   57:#define positionOfBottle2 (bottle_positionOfBottle2->CB_current_value)
        -:   58:#define positionOfBottle3 (bottle_positionOfBottle3->CB_current_value)
        -:   59:#define edge_loading (bottle_edge_loading->CB_current_value)
        -:   60:#define edge_evacuation (bottle_edge_evacuation->CB_current_value)
        -:   61:#define edge_pulseGenerator (bottle_edge_pulseGenerator->CB_current_value)
        -:   62:#define first (bottle_first->CB_current_value)
        -:   63:#define maxLevel (bottle_maxLevel->CB_current_value)
        -:   64:#define increment (*((short *)&(bottle_increment->CB_current_value) + ALIGN_OFFSET_SHORT))
        -:   65:
        -:   66:
        -:   67:/************************ Components offsets ************************/
        -:   68:
        -:   69:
        -:   70:/********************* Initialization function **********************/
        -:   71:
        1:   72:int _bottling_line__bottle_init(void)
        -:   73:{
        1:   74:	(self.Bool+6)->CB_current_value = 1; /*first*/
        1:   75:	(self.Float+3)->CB_current_value = 100.0; /*maxLevel*/
        1:   76:	*((short *)&((self.Int+3)->CB_current_value) + ALIGN_OFFSET_SHORT) = 1; /*increment*/
        1:   77:	self.Bool+=7;
        1:   78:	self.Int+=4;
        1:   79:	self.Float+=4;
        -:   80:
        -:   81:
        1:   82:	return 0;
        -:   83:}
        -:   84:
        -:   85:
        -:   86:/************************ Behavior function *************************/
        -:   87:
       50:   88:int bottling_line__bottle(void)
        -:   89:{
        -:   90:	static char *__comp_name = "bottling_line.bottle";
       50:   91:	if (exec_term_node(self_num)) {
        -:   92:
        -:   93:		/*********************** Internals variables ************************/
        -:   94:
       50:   95:		bottle_existenceOfBottle1 = self.Bool+0;
       50:   96:		bottle_existenceOfBottle2 = self.Bool+1;
       50:   97:		bottle_existenceOfBottle3 = self.Bool+2;
       50:   98:		bottle_levelOfBottle1 = self.Float+0;
       50:   99:		bottle_levelOfBottle2 = self.Float+1;
       50:  100:		bottle_levelOfBottle3 = self.Float+2;
       50:  101:		bottle_positionOfBottle1 = self.Int+0;
       50:  102:		bottle_positionOfBottle2 = self.Int+1;
       50:  103:		bottle_positionOfBottle3 = self.Int+2;
       50:  104:		bottle_edge_loading = self.Bool+3;
       50:  105:		bottle_edge_evacuation = self.Bool+4;
       50:  106:		bottle_edge_pulseGenerator = self.Bool+5;
       50:  107:		bottle_first = self.Bool+6;
       50:  108:		bottle_maxLevel = self.Float+3;
       50:  109:		bottle_increment = self.Int+3;
        -:  110:
        -:  111:		/********************* Pre-conditions execution *********************/
        -:  112:
        -:  113:		/*no Pre-conditions*/
        -:  114:
        -:  115:		/************************ Behavior execution ************************/
        -:  116:
        -:  117:		{
        -:  118:			/* Arrival of a bottle on the conveyor belt			*/
        -:  119:			/* -------------------------------------------------------------------------------------------	*/
       50:  120:			if(first) {
        1:  121:				edge_loading = loading;
        1:  122:				edge_evacuation = evacuation;
        1:  123:				edge_pulseGenerator = pulseGenerator;
        1:  124:				first = 0;
        -:  125:			}
       50:  126:			if (loading > edge_loading)
    #####:  127:			     if (! existenceOfBottle1) 
        -:  128:			          {
    #####:  129:			          existenceOfBottle1=1;
    #####:  130:			          positionOfBottle1=0;
        -:  131:			          }
        -:  132:			     else 
    #####:  133:			          if (! existenceOfBottle2) 
        -:  134:			               {
    #####:  135:			               existenceOfBottle2=1;
    #####:  136:			               positionOfBottle2=0;
        -:  137:			               }
        -:  138:			          else 
    #####:  139:			               if (! existenceOfBottle3) 
        -:  140:			                    {
    #####:  141:			                    existenceOfBottle3=1;
    #####:  142:			                    positionOfBottle3=0;
        -:  143:			                    }
        -:  144:
        -:  145:
        -:  146:			/* Evacuation of a bottle at the end of the conveyor belt	*/
        -:  147:			/* -------------------------------------------------------------------------------------------	*/
       50:  148:			if (evacuation > edge_evacuation)
        -:  149:			     {
    #####:  150:			     if (existenceOfBottle1 && (positionOfBottle1 >= 20)) 
        -:  151:			          {
    #####:  152:			          existenceOfBottle1=0;
    #####:  153:			          levelOfBottle1=0;
        -:  154:			          }
    #####:  155:			     if (existenceOfBottle2 && (positionOfBottle2 >= 20)) 
        -:  156:			          {
    #####:  157:			          existenceOfBottle2=0;
    #####:  158:			          levelOfBottle2=0;
        -:  159:			          }
    #####:  160:			     if (existenceOfBottle3 && (positionOfBottle3 >= 20)) 
        -:  161:			          {
    #####:  162:			          existenceOfBottle3=0;
    #####:  163:			          levelOfBottle3=0;
        -:  164:			          }
        -:  165:			     }
        -:  166:
        -:  167:
        -:  168:			/* Movement of the bottles on the conveyor			*/
        -:  169:			/* -------------------------------------------------------------------------------------------	*/
       50:  170:			if (pulseGenerator > edge_pulseGenerator)
        -:  171:			     {
    #####:  172:			     if existenceOfBottle1 positionOfBottle1=positionOfBottle1+increment;
    #####:  173:			     if existenceOfBottle2 positionOfBottle2=positionOfBottle2+increment;
    #####:  174:			     if existenceOfBottle3 positionOfBottle3=positionOfBottle3+increment;
        -:  175:			      }
        -:  176:
        -:  177:			/* Detection of a bottle in the filling area			*/
        -:  178:			/* --------------------------------------------------------------------------------------------	*/
       50:  179:			if (existenceOfBottle1 && (positionOfBottle1 >=10) && (positionOfBottle1 <= 15)) 
        -:  180:			     {
    #####:  181:			     bottlePresent=1;
    #####:  182:			     levelOfBottle1=levelOfBottle1+inputFlow;
    #####:  183:			     if (levelOfBottle1 >= maxLevel) 
        -:  184:			          {
    #####:  185:			          bottleFilled=1;
    #####:  186:			          levelOfBottle1=maxLevel;
        -:  187:			          }
    #####:  188:			     else bottleFilled=0;
        -:  189:			     }
        -:  190:			else
       50:  191:			     if (existenceOfBottle2 && (positionOfBottle2 >=10) && (positionOfBottle2 <= 15)) 
        -:  192:			          {
    #####:  193:			          bottlePresent=1;
    #####:  194:			          levelOfBottle2=levelOfBottle2+inputFlow;
    #####:  195:			          if (levelOfBottle2 >= maxLevel) 
        -:  196:			          {
    #####:  197:			               bottleFilled=1;
    #####:  198:			               levelOfBottle2=maxLevel;
        -:  199:			               }
    #####:  200:			          else bottleFilled=0;
        -:  201:			          }
        -:  202:			     else
       50:  203:			          if (existenceOfBottle3 && (positionOfBottle3 >=10) && (positionOfBottle3 <= 15)) 
        -:  204:			               {
    #####:  205:			               bottlePresent=1;
    #####:  206:			               levelOfBottle3=levelOfBottle3+inputFlow;
    #####:  207:			               if (levelOfBottle3 >= maxLevel) 
        -:  208:			                    {
    #####:  209:			                   bottleFilled=1;
    #####:  210:			                   levelOfBottle3=maxLevel;
        -:  211:			                   }
    #####:  212:			               else bottleFilled=0;
        -:  213:			               }
       50:  214:			          else bottlePresent=0;
        -:  215:
       50:  216:			edge_loading = loading;
       50:  217:			edge_evacuation = evacuation;
       50:  218:			edge_pulseGenerator = pulseGenerator;
        -:  219:		}
        -:  220:
       50:  221:		CB_post_bool(bottle_bottleFilled);
       50:  222:		CB_post_bool(bottle_bottlePresent);
        -:  223:
        -:  224:		/******************** Post-conditions execution *********************/
        -:  225:
        -:  226:		/*no Post-conditions*/
        -:  227:	}
        -:  228:
        -:  229:	/*************************** self update ****************************/
        -:  230:
       50:  231:	self.Bool += 7;
       50:  232:	self.Int += 4;
       50:  233:	self.Float += 4;
        -:  234:
       50:  235:	return 0;
        -:  236:}
        -:  237:
