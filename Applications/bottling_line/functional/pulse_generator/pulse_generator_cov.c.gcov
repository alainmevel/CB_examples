        -:    0:Source:pulse_generator_cov.c
        -:    0:Graph:MinGW/pulse_generator_cov.gcno
        -:    0:Data:MinGW/pulse_generator_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:40-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * pulse_generator_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "pulse_generator.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index pulse_generator__num = 0;
        -:   20:CB_Mem_Float *pulse_generator_speed;
        -:   21:CB_Mem_Bool *pulse_generator_sensorSupply;
        -:   22:CB_Mem_Bool *pulse_generator_pulseSensor;
        -:   23:CB_Mem_Float *pulse_generator_counter;
        -:   24:CB_Mem_Float *pulse_generator_pulseDuration;
        -:   25:CB_Mem_Bool *pulse_generator_d_sensor;
        -:   26:CB_Mem_Bool *pulse_generator_v_d_sensor;
        -:   27:
        -:   28:/**************************** Variables *****************************/
        -:   29:
        -:   30:#define speed (pulse_generator_speed->CB_current_value)
        -:   31:#define sensorSupply (pulse_generator_sensorSupply->CB_current_value)
        -:   32:#define pulseSensor (pulse_generator_pulseSensor->CB_current_value)
        -:   33:#define counter (pulse_generator_counter->CB_current_value)
        -:   34:#define pulseDuration (pulse_generator_pulseDuration->CB_current_value)
        -:   35:#define d_sensor (pulse_generator_d_sensor->CB_current_value)
        -:   36:#define v_d_sensor (pulse_generator_v_d_sensor->CB_current_value)
        -:   37:
        -:   38:
        -:   39:/************************ Components offsets ************************/
        -:   40:
        -:   41:
        -:   42:/********************* Initialization function **********************/
        -:   43:
        1:   44:int _bottling_line__pulse_generator_init(void)
        -:   45:{
        1:   46:	(pulse_generator_sensorSupply)->CB_current_value = 1; /*sensorSupply*/
        1:   47:	(self.Float+1)->CB_current_value = 0.5; /*pulseDuration*/
        1:   48:	self.Bool+=2;
        1:   49:	self.Float+=2;
        -:   50:
        -:   51:
        1:   52:	return 0;
        -:   53:}
        -:   54:
        -:   55:
        -:   56:/************************ Behavior function *************************/
        -:   57:
        1:   58:int bottling_line__pulse_generator(void)
        -:   59:{
        -:   60:	static char *__comp_name = "bottling_line.pulse_generator";
        1:   61:	if (exec_term_node(self_num)) {
        -:   62:
        -:   63:		/*********************** Internals variables ************************/
        -:   64:
        1:   65:		pulse_generator_counter = self.Float+0;
        1:   66:		pulse_generator_pulseDuration = self.Float+1;
        1:   67:		pulse_generator_d_sensor = self.Bool+0;
        1:   68:		pulse_generator_v_d_sensor = self.Bool+1;
        -:   69:
        -:   70:		/********************* Pre-conditions execution *********************/
        -:   71:
        -:   72:		/*no Pre-conditions*/
        -:   73:
        -:   74:		/************************ Behavior execution ************************/
        -:   75:
        -:   76:		{
        -:   77:			/* -----------------------------------------------------------------------------------------------------------	*/
        -:   78:			/* This module simulates the behaviour of a pulse generator		*/
        -:   79:			/*	at the end of the conveyor belt.				*/
        -:   80:			/* ----------------------------------------------------------------------------------------------------------	*/
        -:   81:
        1:   82:			if (d_sensor ) pulseSensor=v_d_sensor;
        -:   83:			else
        1:   84:				if (( sensorSupply ) && (speed != 0.0)) {	
    #####:   85:					counter += CLOCK_PERIOD/1000000.0;
    #####:   86:					if (counter >= pulseDuration) {
    #####:   87:						pulseSensor = ! pulseSensor;
    #####:   88:						counter = 0.0;
        -:   89:					}
        -:   90:				}
        1:   91:				else pulseSensor = 0;
        -:   92:		}
        -:   93:
        1:   94:		CB_post_bool(pulse_generator_pulseSensor);
        -:   95:
        -:   96:		/******************** Post-conditions execution *********************/
        -:   97:
        -:   98:		/*no Post-conditions*/
        -:   99:	}
        -:  100:
        -:  101:	/*************************** self update ****************************/
        -:  102:
        1:  103:	self.Bool += 2;
        1:  104:	self.Float += 2;
        -:  105:
        1:  106:	return 0;
        -:  107:}
        -:  108:
