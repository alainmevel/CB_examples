[HEADER]
DATE = date #2007-03-13
STANDARD = 'PLCopen  v0.1 1993'
SENDER = 'Schneider Automation S.A.S. PL7 PRO V4.4'
NB_BLOCKS = 24
[APPLICATION]
NAME = 'STATION'
DATE = date_and_time#2007-03-13-11:22:21
VERSION = '0.0'
[VENDOR]
SOFT_CONFIGURATION
NB_TM = 0
NB_TIMER = 0
NB_MONO = 0
NB_CPT = 0
NB_REG = 0
NB_DRUM = 0
NB_ACTIVE_STEPS = 13
NB_TRANSITIONS = 43
NB_ACTIVE_TIME = 8
CHART (MAX_PAGES = 8 , MAX_STEP = 8)
NB_MACRO_STEPS = 4
XM0 (MAX_PAGES = 8 , MAX_STEP = 19)
XM1 (MAX_PAGES = 8 , MAX_STEP = 43)
XM2 (MAX_PAGES = 8 , MAX_STEP = 16)
XM3 (MAX_PAGES = 8 , MAX_STEP = 13)
NB_INTERNAL_BITS = 252
NB_INTERNAL_WORDS = 242
NB_CONSTANT_WORDS = 256
END_CONFIGURATION
HARD_CONFIGURATION
CU
CODE = '0x15013005'
REFERENCE = 'TSX 57103'
VERSION = 'V5.6'
DESIGNATION = 'PROCESSEUR TSX P 57103'
ADDRESS = '0'
CARTRIDGE = '64 KWords, Type : 0'
AUTO_RUN = 0
RUN_STOP = 0
MW_INIT_ZERO = 1
TASK MAST (INTERVAL := t#0 MS, PRIORITY := 110 ,TMAX := t#250 MS)
TASK FAST (INTERVAL := t#5 MS, PRIORITY := 100 ,TMAX := t#100 MS)
LOGICAL
	CHANNEL 0
		TASK = MAST
		PROMPTITUDE = 0
		FU '255' '10'
		IOB '3_10000' '1.0'
		KW = (0x400,0x1e0f,0x8)
	END_CHANNEL
END_LOGICAL
END_CU
BUS 'X'
RACK 0
CODE = '0x56019105'
REFERENCE = 'TSX RKY 6EX'
DESIGNATION = 'RACK 6 POSITIONS EXTENSIBLE V2'
TYPE = 'Base'
ADDRESS = '0'
SUPPLY
CODE = '0x3019005'
REFERENCE = 'TSX PSY 2600'
END_SUPPLY
MODULE 2
CODE = '0x51010005'
REFERENCE = 'TSX DEY 64D2K'
VERSION = 'V1.0'
DESIGNATION = '64E 24VCC SINK CONN'
ADDRESS = '2'
LOGICAL
	CHANNEL 0
		TASK = MAST
		PROMPTITUDE = 0
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 8
		TASK = MAST
		PROMPTITUDE = 0
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 16
		TASK = MAST
		PROMPTITUDE = 0
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 24
		TASK = MAST
		PROMPTITUDE = 0
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 32
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 40
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 48
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
	CHANNEL 56
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_1' '1.0'
		KW = (0x1,0,0)
	END_CHANNEL
END_LOGICAL
END_MODULE
MODULE 3
CODE = '0xb1010005'
REFERENCE = 'TSX DSY 64T2K'
VERSION = 'V1.0'
DESIGNATION = '64S 24VCC 0,1A CONN'
ADDRESS = '3'
LOGICAL
	CHANNEL 0
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 8
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 16
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 24
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 32
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 40
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 48
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
	CHANNEL 56
		TASK = MAST
		PROMPTITUDE = 1
		FU '1' '10'
		IOB '0_101' '1.0'
		KW = (0x16,0,0)
	END_CHANNEL
END_LOGICAL
END_MODULE
END_RACK
END_BUS
END_CONFIGURATION
[SOURCE_UNIT]
SU_TYPE = CONF
NAME = 'STATION'
LANGUAGE = OTHERS
BODY = 
CONFIGURATION 'STATION'
RESOURCE 'TSX 57103 V5.6' ON TSX_57103
TASK MAST (INTERVAL := t#0 MS, PRIORITY := 110 ,TMAX := t#250 MS);
TASK FAST (INTERVAL := t#5 MS, PRIORITY := 100 ,TMAX := t#100 MS);
PROGRAM 'Init' WITH MAST : SECTION;
PROGRAM 'Sequential' WITH MAST : SECTION;
  PROGRAM 'Prl' : 'Sequential' ;
  PROGRAM 'Chart' : 'Sequential' ;
  PROGRAM 'Macro0' : 'Sequential' ;
  PROGRAM 'Macro1' : 'Sequential' ;
  PROGRAM 'Macro2' : 'Sequential' ;
  PROGRAM 'Macro3' : 'Sequential' ;
  PROGRAM 'Post' : 'Sequential' ;
PROGRAM 'Wkm1proc' WITH MAST : SECTION;
PROGRAM 'F1turm1flt' WITH MAST : SECTION;
PROGRAM 'F2rcyl1flt' WITH MAST : SECTION;
PROGRAM 'F2lcyl1flt' WITH MAST : SECTION;
PROGRAM 'F3spinm1def' WITH MAST : SECTION;
PROGRAM 'F1turm1act' WITH MAST : SECTION;
PROGRAM 'F2rcyl1act' WITH MAST : SECTION;
PROGRAM 'F2lcyl1act' WITH MAST : SECTION;
PROGRAM 'F3spinm1act' WITH MAST : SECTION;
PROG 'Combinat' (*Combinatoires*)
      'Init' ;
      'Prl' ;
      'Post' ;
END_PROG
PROG 'Cpu1_m' (*CPU1_M*)
      'Wkm1proc' ;
      PROG 'Procgenf' (*ProcGenF*)
            'Macro0' ;
      END_PROG
      PROG 'F1' (*F1*)
            PROG 'Ascf1pr' (*AscF1PROC*)
                  'Macro1' ;
            END_PROG
            PROG 'F1turm1v' (*F1TurM1VAD*)
                  PROG 'Ctrtur' (*CtrTur*)
                        'F1turm1act' ;
                        'F1turm1flt' ;
                  END_PROG
            END_PROG
      END_PROG
      PROG 'F2' (*F2*)
            PROG 'Claf1pr' (*ClaF1PROC*)
                  'Macro2' ;
            END_PROG
            PROG 'F2rcyl1v' (*F2RCYL1VAD*)
                  PROG 'Ctrclamr' (*CtrClamR*)
                        'F2rcyl1act' ;
                        'F2rcyl1flt' ;
                  END_PROG
            END_PROG
            PROG 'F2lcyl1v' (*F2LCYL1VAD*)
                  PROG 'Ctrclaml' (*CtrClamL*)
                        'F2lcyl1act' ;
                        'F2lcyl1flt' ;
                  END_PROG
            END_PROG
      END_PROG
      PROG 'F3' (*F3*)
            PROG 'Spinf1pr' (*SpinF1PROC*)
                  'Macro3' ;
            END_PROG
            PROG 'F3spin1v' (*F3SpinM1VAD*)
                  PROG 'F3spin1s' (*F3SpinM1STR*)
                        'F3spinm1act' ;
                        'F3spinm1def' ;
                  END_PROG
            END_PROG
      END_PROG
END_PROG
END_RESOURCE
END_CONFIGURATION
[SOURCE_UNIT]
SU_TYPE = F_B
NAME = 'DEFAULT'
VERSION = '00.11'
DATE = DATE_AND_TIME #2006-12-07-11:52:36
LANGUAGE = ST
BODY = 
(*Temporisation IEC retard à la montée format TIME*)
FUNCTION_BLOCK Cb_ton
VAR_INPUT
In0 : BOOL (*Start Tempo*) := FALSE;
Prt : AR_D : 2 (*Preset*);
END_VAR
VAR_OUTPUT
Q0 : BOOL (*End tempo*) := FALSE;
Cv : AR_D : 2 (*Curent value*) := ( 0, 
0 ) ;
END_VAR
VAR
Mfrt : BOOL (*Mémoire front aremement*) := FALSE;
Delta : DWORD (*Ecart de temps*) := 0;
Tn : WORD (*Memoire timers systeme*) := 0;
END_VAR
(*PHRASE*)
IF (In0) AND ((Cv[0] < Prt[0]) OR (Cv[1] < Prt[1])) THEN

 
    IF (NOT Mfrt) THEN                      (*  Si front montant armement *)
        Tn:= %SW18;                          (* Init Memoire %sw18  *)
        Mfrt :=TRUE;
    ELSE
        IF (%SW18 >= Tn) THEN                 (* Calcul du nombre ms écoulée *)
            Delta := (%SW18 - Tn) *100 ;
        ELSE
            Delta := ((%SW18 + 65535) - Tn) * 100;
        END_IF;
        Tn := %SW18;                         (* Mémorisation du nombre de %sw18 pour cycle suivant *)
    
        Cv[1] := Cv[1] + (Delta * 10);          (* Incrementation de la valeur courante  *)
        IF (Cv[1] >= 864000000) THEN
            Cv[0] := Cv[0] + 1;                 (* Incrmentation du nombre de jour  *)
            Cv[1] := Cv[1] - 864000000;
        END_IF;    
    END_IF;
END_IF;
 
IF (NOT In0) THEN
    Cv[0] := 0;                          (* Raz tempo si pas armement  *)
    Cv[1] := 0;
    Tn := 0;
    Mfrt := FALSE;
END_IF;    
 
IF ((Cv[0] >= Prt[0]) AND (Cv[1] >= Prt[1])) THEN        (* Si dépassement preset, recalage de la valeur courante  *)
    Cv[0] := Prt[0];
    Cv[1] := Prt[1];
END_IF;
 
Q0 := In0 AND ((Cv[0] >= Prt[0]) AND (Cv[1] >= Prt[1]));          (* Calcul de la sortie tempo *)
(*END_PHRASE*)
END_FUNCTION_BLOCK
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Init'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
(*PHRASE*)
IF NOT(%S0 OR %S1 OR %S13)THEN JUMP %L999;END_IF;
	SET %S0;
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* PLC1 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CPU1_M *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* modes *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* WKM1PROC *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* fault *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* functional *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1TurM1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CtrTur *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1TurM1FLT *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2RCYL1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CtrClamR *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2RCYL1FLT *)
	%MD0[1]:=100000;
	%MD4[1]:=2000;
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2LCYL1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CtrClamL *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2LCYL1FLT *)
	%MD8[1]:=100000;
	%MD12[1]:=2000;
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3SpinM1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3SpinM1STR *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3SpinM1DEF *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* process *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* functional *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* ProcGenF *)
	%MD20:=100;
	%MD22:=50;
	%MD24:=100;
	%MD26:=50;
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* AscF1PROC *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* ClaF1PROC *)
	%MD32:=110;
	%MD34:=110;
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* SpinF1PROC *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* pilot *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* functional *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1TurM1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CtrTur *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F1TurM1ACT *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2RCYL1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CtrClamR *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2RCYL1ACT *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2LCYL1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* CtrClamL *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F2LCYL1ACT *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3 *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3SpinM1VAD *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3SpinM1STR *)
	
(*END_PHRASE*)
(*PHRASE*)
	
	(* F3SpinM1ACT *)
(*END_PHRASE*)
(*PHRASE*)
%L999:
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST PRL 
PROGRAM
(*PHRASE*)
IF(RE %I2.9)THEN
	%MD16:=0;
END_IF;

IF((%X0.12 AND(%MD18>=%MD20)AND NOT %I2.12))THEN
	%MD16:=1;
END_IF;

IF((%X0.13 AND(%MD18>=%MD22)AND NOT %I2.13))THEN
	%MD16:=2;
END_IF;

IF((%X0.14 AND(%MD18>=%MD24)AND NOT %I2.11))THEN
	%MD16:=3;
END_IF;

IF((%X0.15 AND(%MD18>=%MD26)AND NOT %I2.14))THEN
	%MD16:=4;
END_IF;

IF((%X0.12 AND %I2.13 AND NOT %I2.12))THEN
	%MD16:=5;
END_IF;

IF((%X0.14 AND %I2.14 AND NOT %I2.11))THEN
	%MD16:=6;
END_IF;

IF(((%X0.13 OR %X0.14)AND %I2.14))THEN
	%MD16:=7;
END_IF;

IF(((%X0.11 OR %X0.13 OR %X0.16 OR %X0.17)AND %I2.11))THEN
	%MD16:=8;
END_IF;

IF(((%X0.11 OR %X0.15 OR %X0.16 OR %X0.17)AND %I2.12))THEN
	%MD16:=9;
END_IF;

IF(((%X0.11 OR %X0.15 OR %X0.16 OR %X0.17)AND %I2.13))THEN
	%MD16:=10;
END_IF;

%M35:=(%MD30=0)AND(%MD28=0)AND(%MD36=0)AND(%MD16=0);

%M34:=%M35 AND((%I2.6 AND(RE %M0 OR %M1))OR %M2);
(*END_PHRASE*)
(*PHRASE*)
IF((RE %I2.9))THEN
	%MD28:=0;
END_IF;

IF((%X1.21 OR %X1.41)AND %M7)THEN
	%MD28:=1;
END_IF;

IF((%X1.31 OR %X1.11)AND %M7)THEN
	%MD28:=2;
END_IF;

IF((%X1.21 OR %X1.11)AND %M7)THEN
	%MD28:=3;
END_IF;

IF((%X1.41 OR %X1.31)AND %M7)THEN
	%MD28:=4;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF(((%X2.10 OR %X2.12)AND RE %I2.9))THEN
	%MD30:=0;
END_IF;

IF(%X2.11 AND %M9)THEN
	%MD30:=1;
END_IF;

IF(%X2.11 AND %M8)THEN
	%MD30:=2;
END_IF;

IF(%X2.13 AND %M9)THEN
	%MD30:=3;
END_IF;

IF(%X2.13 AND %M8)THEN
	%MD30:=4;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF((RE %I2.9))THEN
	%MD36:=0;
END_IF;

IF(%X3.11 AND %M10)THEN
	%MD36:=1;
END_IF;
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = OTHERS
BODY = 
READ_WRITE
ADDRESS = MAST CHART 
PROG_LANGAGE = GR7
PROGRAM
MAST
'Chart'
NB_PAGES = 8
PAGE 0
INITIAL_STEP 0 AT (C 1,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 2) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
MACRO_STEP M0 AT (C 1,L 3) END_MACRO_STEP
TRANSITION (*TOP*) (ST) AT (C 1,L 4) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
INITIAL_STEP 1 AT (C 3,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 3,L 2) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
MACRO_STEP M1 AT (C 3,L 3) END_MACRO_STEP
TRANSITION (*TOP*) (ST) AT (C 3,L 4) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
INITIAL_STEP 2 AT (C 5,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 5,L 2) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
MACRO_STEP M2 AT (C 5,L 3) END_MACRO_STEP
TRANSITION (*TOP*) (ST) AT (C 5,L 4) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
INITIAL_STEP 3 AT (C 7,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 7,L 2) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
MACRO_STEP M3 AT (C 7,L 3) END_MACRO_STEP
TRANSITION (*TOP*) (ST) AT (C 7,L 4) : 
(*PHRASE*)
TRUE
(*END_PHRASE*)
END_TRANSITION
T_S_OR_LINK FROM (C 1,L 4) TO (C 1,L 1) := [H_LINK FROM (C 1,L 4) TO (C 0,L 4), V_LINK FROM (C 0,L 4) TO (C 0,L 0), H_LINK FROM (C 0,L 0) TO (C 1,L 0)]
T_S_OR_LINK FROM (C 3,L 4) TO (C 3,L 1) := [H_LINK FROM (C 3,L 4) TO (C 2,L 4), V_LINK FROM (C 2,L 4) TO (C 2,L 0), H_LINK FROM (C 2,L 0) TO (C 3,L 0)]
T_S_OR_LINK FROM (C 5,L 4) TO (C 5,L 1) := [H_LINK FROM (C 5,L 4) TO (C 4,L 4), V_LINK FROM (C 4,L 4) TO (C 4,L 0), H_LINK FROM (C 4,L 0) TO (C 5,L 0)]
T_S_OR_LINK FROM (C 7,L 4) TO (C 7,L 1) := [H_LINK FROM (C 7,L 4) TO (C 6,L 4), V_LINK FROM (C 6,L 4) TO (C 6,L 0), H_LINK FROM (C 6,L 0) TO (C 7,L 0)]
END_PAGE
PAGE 1
END_PAGE
PAGE 2
END_PAGE
PAGE 3
END_PAGE
PAGE 4
END_PAGE
PAGE 5
END_PAGE
PAGE 6
END_PAGE
PAGE 7
END_PAGE
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = OTHERS
BODY = 
READ_WRITE
ADDRESS = MAST Xm0 
PROG_LANGAGE = GR7
PROGRAM
MAST
'Macro0'
NB_PAGES = 8
PAGE 0
STEP IN AT (C 0,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (LD) AT (C 0,L 2) : 
RUNG 
OPEN_CONTACT(%X0.OUT),H_LINK(9),HASH_COIL;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
END_RUNG
END_TRANSITION
STEP OUT AT (C 0,L 3) : END_STEP
FROM 17 (*BOTTOM*)  AT (C 1,L 0)
INITIAL_STEP 10 AT (C 1,L 1) : 
ACTION (P1,ST) :
(*PHRASE*)
%Q3.1:=TRUE;
%M22:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%Q3.1:=TRUE;

%M22:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%Q3.1:=FALSE;
%M22:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 2) : 
(*PHRASE*)
%M34
(*END_PHRASE*)
END_TRANSITION
STEP 11 AT (C 1,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%M33:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M33:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M33:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 4) : 
(*PHRASE*)
%M37
(*END_PHRASE*)
END_TRANSITION
STEP 12 AT (C 1,L 5) : 
ACTION (P1,ST) :
(*PHRASE*)
%M31:=TRUE;
%M26:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M31:=TRUE;

%M26:=TRUE;

%MD18:=%MD18+1;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M31:=FALSE;
%M26:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 6) : 
(*PHRASE*)
%I2.12
(*END_PHRASE*)
END_TRANSITION
STEP 13 AT (C 1,L 7) : 
ACTION (P1,ST) :
(*PHRASE*)
%M30:=TRUE;
%M26:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M30:=TRUE;

%M26:=TRUE;

%MD18:=%MD18+1;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M30:=FALSE;
%M26:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 8) : 
(*PHRASE*)
%I2.13
(*END_PHRASE*)
END_TRANSITION
STEP 14 AT (C 1,L 9) : 
ACTION (P1,ST) :
(*PHRASE*)
%M29:=TRUE;
%M26:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M29:=TRUE;

%M26:=TRUE;

%MD18:=%MD18+1;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M29:=FALSE;
%M26:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 10) : 
(*PHRASE*)
%I2.11
(*END_PHRASE*)
END_TRANSITION
STEP 15 AT (C 1,L 11) : 
ACTION (P1,ST) :
(*PHRASE*)
%M28:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M28:=TRUE;

%MD18:=%MD18+1;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M28:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 12) : 
(*PHRASE*)
%I2.14
(*END_PHRASE*)
END_TRANSITION
TO 16 AT (C 1,L 13)
END_PAGE
PAGE 1
FROM 15 (*BOTTOM*)  AT (C 1,L 0)
STEP 16 AT (C 1,L 1) : 
ACTION (P1,ST) :
(*PHRASE*)
%M32:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M32:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M32:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 2) : 
(*PHRASE*)
%M36
(*END_PHRASE*)
END_TRANSITION
STEP 17 AT (C 1,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%M22:=TRUE;
%Q3.2:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M22:=TRUE;

%Q3.2:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M22:=FALSE;
%Q3.2:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 4) : 
(*PHRASE*)
NOT %I2.6
(*END_PHRASE*)
END_TRANSITION
TO 10 AT (C 1,L 5)
END_PAGE
PAGE 2
END_PAGE
PAGE 3
END_PAGE
PAGE 4
END_PAGE
PAGE 5
END_PAGE
PAGE 6
END_PAGE
PAGE 7
END_PAGE
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = OTHERS
BODY = 
READ_WRITE
ADDRESS = MAST Xm1 
PROG_LANGAGE = GR7
PROGRAM
MAST
'Macro1'
NB_PAGES = 8
PAGE 0
STEP IN AT (C 0,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (LD) AT (C 0,L 2) : 
RUNG 
OPEN_CONTACT(%X1.OUT),H_LINK(9),HASH_COIL;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
END_RUNG
END_TRANSITION
STEP OUT AT (C 0,L 3) : END_STEP
FROM 11 (*BOTTOM*)  AT (C 1,L 0)
FROM 21 (*BOTTOM*)  AT (C 3,L 0)
FROM 31 (*BOTTOM*)  AT (C 5,L 0)
FROM 41 (*BOTTOM*)  AT (C 7,L 0)
INITIAL_STEP 10 AT (C 1,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 2) : 
(*PHRASE*)
%M29 AND(%MD28=0)
(*END_PHRASE*)
END_TRANSITION
STEP 11 AT (C 1,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%Q3.5:=TRUE;
%Q3.4:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%Q3.5:=TRUE;

%Q3.4:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%Q3.5:=FALSE;
%Q3.4:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 4) : 
(*PHRASE*)
NOT %M29 OR(%MD28>0)
(*END_PHRASE*)
END_TRANSITION
TO 10 AT (C 1,L 5)
INITIAL_STEP 20 AT (C 3,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 3,L 2) : 
(*PHRASE*)
%M31 AND(%MD28=0)
(*END_PHRASE*)
END_TRANSITION
STEP 21 AT (C 3,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%Q3.6:=TRUE;
%Q3.4:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%Q3.6:=TRUE;

%Q3.4:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%Q3.6:=FALSE;
%Q3.4:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 3,L 4) : 
(*PHRASE*)
NOT %M31 OR(%MD28>0)
(*END_PHRASE*)
END_TRANSITION
TO 20 AT (C 3,L 5)
INITIAL_STEP 30 AT (C 5,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 5,L 2) : 
(*PHRASE*)
%M28 AND(%MD28=0)
(*END_PHRASE*)
END_TRANSITION
STEP 31 AT (C 5,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%Q3.5:=TRUE;
%Q3.3:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%Q3.5:=TRUE;

%Q3.3:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%Q3.5:=FALSE;
%Q3.3:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 5,L 4) : 
(*PHRASE*)
NOT %M28 OR(%MD28>0)
(*END_PHRASE*)
END_TRANSITION
TO 30 AT (C 5,L 5)
INITIAL_STEP 40 AT (C 7,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 7,L 2) : 
(*PHRASE*)
%M30 AND(%MD28=0)
(*END_PHRASE*)
END_TRANSITION
STEP 41 AT (C 7,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%Q3.6:=TRUE;
%Q3.3:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%Q3.6:=TRUE;

%Q3.3:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%Q3.6:=FALSE;
%Q3.3:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 7,L 4) : 
(*PHRASE*)
NOT %M30 OR(%MD28>0)
(*END_PHRASE*)
END_TRANSITION
TO 40 AT (C 7,L 5)
END_PAGE
PAGE 1
END_PAGE
PAGE 2
END_PAGE
PAGE 3
END_PAGE
PAGE 4
END_PAGE
PAGE 5
END_PAGE
PAGE 6
END_PAGE
PAGE 7
END_PAGE
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = OTHERS
BODY = 
READ_WRITE
ADDRESS = MAST Xm2 
PROG_LANGAGE = GR7
PROGRAM
MAST
'Macro2'
NB_PAGES = 8
PAGE 0
STEP IN AT (C 0,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (LD) AT (C 0,L 2) : 
RUNG 
OPEN_CONTACT(%X2.OUT),H_LINK(9),HASH_COIL;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
END_RUNG
END_TRANSITION
STEP OUT AT (C 0,L 3) : END_STEP
INITIAL_STEP 10 AT (C 1,L 3) : 
ACTION (N1,ST) :
(*PHRASE*)
IF(%MD30=0)THEN
	%M36:=TRUE;
END_IF;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M36:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOP*) (ST) AT (C 1,L 4) : 
(*PHRASE*)
%M33 AND NOT %M32 AND(%MD30=0)
(*END_PHRASE*)
END_TRANSITION
STEP 11 AT (C 1,L 7) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 8) : 
(*PHRASE*)
%I2.25 AND %I2.28
(*END_PHRASE*)
END_TRANSITION
STEP 12 AT (C 1,L 9) : 
ACTION (P1,ST) :
(*PHRASE*)
%M37:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M37:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M37:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 10) : 
(*PHRASE*)
%M32 AND NOT %M33 AND(%MD30=0)
(*END_PHRASE*)
END_TRANSITION
TO 13 AT (C 1,L 11)
FROM 13 AT (C 2,L 2)
FROM 13 AT (C 2,L 6)
TRANSITION (*BOTTOM*) (ST) AT (C 2,L 8) : 
(*PHRASE*)
%M32 AND NOT %M33
(*END_PHRASE*)
END_TRANSITION
TO 13 AT (C 2,L 9)
FROM 14 AT (C 3,L 2)
TRANSITION (*BOTTOM*) (ST) AT (C 3,L 8) : 
(*PHRASE*)
(%MD30>0)
(*END_PHRASE*)
END_TRANSITION
TO 14 AT (C 3,L 9)
T_S_OR_LINK FROM (C 3,L 2) TO (C 1,L 3) := [H_LINK FROM (C 3,L 2) TO (C 1,L 2)]
T_S_OR_LINK FROM (C 2,L 2) TO (C 1,L 3) := [H_LINK FROM (C 2,L 2) TO (C 1,L 2)]
S_T_OR_LINK FROM (C 1,L 7) TO (C 2,L 8) := [H_LINK FROM (C 1,L 8) TO (C 2,L 8)]
S_T_OR_LINK FROM (C 1,L 7) TO (C 3,L 8) := [H_LINK FROM (C 1,L 8) TO (C 3,L 8)]
T_S_OR_LINK FROM (C 1,L 4) TO (C 1,L 7) := [V_LINK FROM (C 1,L 4) TO (C 1,L 6)]
T_S_OR_LINK FROM (C 2,L 6) TO (C 1,L 7) := [H_LINK FROM (C 2,L 6) TO (C 1,L 6)]
END_PAGE
PAGE 1
FROM 12 AT (C 2,L 0)
FROM 11 AT (C 3,L 0)
STEP 13 AT (C 1,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 2) : 
(*PHRASE*)
%M33 AND NOT %M32
(*END_PHRASE*)
END_TRANSITION
TO 11 AT (C 1,L 3)
TRANSITION (*BOTTOM*) (ST) AT (C 2,L 2) : 
(*PHRASE*)
%I2.26 AND %I2.27
(*END_PHRASE*)
END_TRANSITION
TO 10 AT (C 2,L 3)
TRANSITION (ST) AT (C 3,L 2) : 
(*PHRASE*)
(%MD30>0)
(*END_PHRASE*)
END_TRANSITION
STEP 14 AT (C 3,L 5) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 3,L 6) : 
(*PHRASE*)
%I2.26 AND %I2.27
(*END_PHRASE*)
END_TRANSITION
TO 10 AT (C 3,L 7)
FROM 11 AT (C 4,L 4)
S_T_OR_LINK FROM (C 1,L 1) TO (C 2,L 2) := [H_LINK FROM (C 1,L 2) TO (C 2,L 2)]
S_T_OR_LINK FROM (C 1,L 1) TO (C 3,L 2) := [H_LINK FROM (C 1,L 2) TO (C 3,L 2)]
T_S_OR_LINK FROM (C 3,L 0) TO (C 1,L 1) := [H_LINK FROM (C 3,L 0) TO (C 1,L 0)]
T_S_OR_LINK FROM (C 2,L 0) TO (C 1,L 1) := [H_LINK FROM (C 2,L 0) TO (C 1,L 0)]
T_S_OR_LINK FROM (C 3,L 2) TO (C 3,L 5) := [V_LINK FROM (C 3,L 2) TO (C 3,L 4)]
T_S_OR_LINK FROM (C 4,L 4) TO (C 3,L 5) := [H_LINK FROM (C 4,L 4) TO (C 3,L 4)]
END_PAGE
PAGE 2
END_PAGE
PAGE 3
END_PAGE
PAGE 4
END_PAGE
PAGE 5
END_PAGE
PAGE 6
END_PAGE
PAGE 7
END_PAGE
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = OTHERS
BODY = 
READ_WRITE
ADDRESS = MAST Xm3 
PROG_LANGAGE = GR7
PROGRAM
MAST
'Macro3'
NB_PAGES = 8
PAGE 0
STEP IN AT (C 0,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (LD) AT (C 0,L 2) : 
RUNG 
OPEN_CONTACT(%X3.OUT),H_LINK(9),HASH_COIL;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
EMPTY_LINE;
END_RUNG
END_TRANSITION
STEP OUT AT (C 0,L 3) : END_STEP
FROM 11 (*BOTTOM*)  AT (C 1,L 0)
INITIAL_STEP 10 AT (C 1,L 1) : END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 2) : 
(*PHRASE*)
%M26 AND(%MD36=0)
(*END_PHRASE*)
END_TRANSITION
STEP 11 AT (C 1,L 3) : 
ACTION (P1,ST) :
(*PHRASE*)
%M25:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (N1,ST) :
(*PHRASE*)
%M25:=TRUE;
(*END_PHRASE*)
END_ACTION

ACTION (P0,ST) :
(*PHRASE*)
%M25:=FALSE;
(*END_PHRASE*)
END_ACTION
END_STEP
TRANSITION (*TOPBOTTOM*) (ST) AT (C 1,L 4) : 
(*PHRASE*)
NOT %M26 OR(%MD36>0)
(*END_PHRASE*)
END_TRANSITION
TO 10 AT (C 1,L 5)
END_PAGE
PAGE 1
END_PAGE
PAGE 2
END_PAGE
PAGE 3
END_PAGE
PAGE 4
END_PAGE
PAGE 5
END_PAGE
PAGE 6
END_PAGE
PAGE 7
END_PAGE
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Sequential'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST POST 
PROGRAM
(*PHRASE*)
IF((%X0.10 OR RE %M48 OR RE %M49 OR RE %M50 OR RE %M51))THEN
	%MD18:=0;
END_IF;

%M27:=NOT %M35;
(*END_PHRASE*)
(*PHRASE*)
%M24:=%X2.11 OR %X2.12;

%M23:=%X2.11 OR %X2.12;
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'Wkm1proc'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
(*PHRASE*)
(* Power up *)
%L1:
(*END_PHRASE*)
(*PHRASE*)
%M39:=RE %I2.3 AND NOT(%M5);
%M40:=RE %I2.3 AND %M5;
IF %M40 THEN %M41:=FALSE;END_IF;
IF %M39 THEN %M41:=TRUE;END_IF;
%M5:=%M41;
(*END_PHRASE*)
(*PHRASE*)
(* Emergency stop *)
%L2:
(*END_PHRASE*)
(*PHRASE*)
IF NOT(%I2.4)THEN
	%M6:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF FE %I2.9 AND %I2.4 THEN
	%M6:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Operating modes management *)
%L3:
(*END_PHRASE*)
(*PHRASE*)
%M3:=%M5 AND NOT(%M6)AND %I2.2 AND NOT(%I2.5);
(*END_PHRASE*)
(*PHRASE*)
%M4:=%M5 AND NOT(%M6)AND NOT(%I2.2)AND %I2.5;
(*END_PHRASE*)
(*PHRASE*)
IF RE %I2.8 AND %M22 AND %M3 AND %I2.7 AND NOT(%I2.10)AND NOT(%M1)AND
NOT(%M2)THEN
	%M0:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF RE %I2.8 AND %M22 AND %M3 AND NOT(%I2.7)AND %I2.10 AND NOT(%M0)AND
NOT(%M2)THEN
	%M1:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF RE %I2.8 AND %M22 AND %M3 AND NOT(%I2.7)AND NOT(%I2.10)AND NOT(%M0)AND
NOT(%M1)THEN
	%M2:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF FE %M22 AND %M2 THEN
	%M2:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF FE %M22 AND %M0 THEN
	%M0:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF FE %M22 AND %M1 AND NOT(%M3)THEN
	%M1:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
%L4:
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F1turm1flt'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
(*PHRASE*)
(* Fault aknowledgement *)
%L1:
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M11:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M12:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M13:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M7:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Fault of forward and backward feedbacks *)
%L2:
(*END_PHRASE*)
(*PHRASE*)
%M42:=%Q3.8 AND %Q3.10;
%MD38[0]:=0;
%MD38[1]:=20000;
Ton_fw1(%M42,%MD38:2);
(*END_PHRASE*)
(*PHRASE*)
IF(Ton_fw1.Q0 AND NOT(%I2.15)OR
(Ton_fw1.Q0 AND %Q3.10 AND NOT(%I2.16)OR
Ton_fw1.Q0 AND %Q3.7 AND NOT(%I2.22)))THEN
	%M12:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
%M43:=%Q3.9 AND %Q3.10;
Ton_bw1(%M43,%MD38:2);
(*END_PHRASE*)
(*PHRASE*)
IF(Ton_bw1.Q0 AND NOT(%I2.17)OR
(Ton_bw1.Q0 AND %Q3.7 AND NOT(%I2.22)OR
Ton_bw1.Q0 AND %Q3.10 AND NOT(%I2.16)))THEN
	%M13:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Electric fault *)
%L3:
(*END_PHRASE*)
(*PHRASE*)
IF NOT(%I2.21)THEN
	%M11:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* General fault *)
%L4:
(*END_PHRASE*)
(*PHRASE*)
IF %M11 OR %M12 OR %M13 THEN
	%M7:=TRUE;
END_IF;
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F2rcyl1flt'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
(*PHRASE*)
(* Fault acknowledgement *)
%L1:
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M14:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M15:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M16:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M9:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Faults of movements *)
%L2:
(*END_PHRASE*)
(*PHRASE*)
Ton_out1(%Q3.11,%MD0:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_out1.Q0 AND NOT(%I2.25)THEN
	%M15:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
%M44:=NOT(%Q3.11);
Ton_in1(%M44,%MD0:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_in1.Q0 AND NOT(%I2.26)THEN
	%M16:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Discordance fault *)
%L3:
(*END_PHRASE*)
(*PHRASE*)
%M45:=%I2.25 AND %I2.26;
Ton_disc1(%M45,%MD4:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_disc1.Q0 THEN
	%M14:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* General fault *)
%L4:
(*END_PHRASE*)
(*PHRASE*)
IF %M14 OR %M15 OR %M16 THEN
	%M9:=TRUE;
END_IF;
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F2lcyl1flt'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
(*PHRASE*)
(* Fault acknowledgement *)
%L1:
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M17:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M18:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M19:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M8:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Faults of movements *)
%L2:
(*END_PHRASE*)
(*PHRASE*)
Ton_out2(%Q3.12,%MD8:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_out2.Q0 AND NOT(%I2.28)THEN
	%M18:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
%M46:=NOT(%Q3.12);
Ton_in2(%M46,%MD8:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_in2.Q0 AND NOT(%I2.27)THEN
	%M19:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Discordance fault *)
%L3:
(*END_PHRASE*)
(*PHRASE*)
%M47:=%I2.28 AND %I2.27;
Ton_disc2(%M47,%MD12:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_disc2.Q0 THEN
	%M17:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* General fault *)
%L4:
(*END_PHRASE*)
(*PHRASE*)
IF %M17 OR %M18 OR %M19 THEN
	%M8:=TRUE;
END_IF;
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F3spinm1def'
LANGUAGE = ST
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
(*PHRASE*)
(* Acknowledgement of faults *)
%L1:
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M20:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M21:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
IF %I2.9 THEN
	%M10:=FALSE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Fault of forward feedback *)
%L2:
(*END_PHRASE*)
(*PHRASE*)
%MD40[0]:=0;
%MD40[1]:=20000;
Ton_fb1(%Q3.0,%MD40:2);
(*END_PHRASE*)
(*PHRASE*)
IF Ton_fb1.Q0 AND NOT(%I2.31)THEN
	%M21:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* Electric fault *)
%L3:
(*END_PHRASE*)
(*PHRASE*)
IF NOT(%I2.32)THEN
	%M20:=TRUE;
END_IF;
(*END_PHRASE*)
(*PHRASE*)
(* General fault *)
%L4:
(*END_PHRASE*)
(*PHRASE*)
IF %M21 OR %M20 THEN
	%M10:=TRUE;
END_IF;
(*END_PHRASE*)
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F1turm1act'
LANGUAGE = LD
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
RUNG %L1 (* Forward command *)
OPEN_CONTACT(%M3),OPEN_CONTACT(%Q3.6),H_LINK(7),V_LINK+CLOSED_CONTACT(%M7),COIL(%Q3.8);
OPEN_CONTACT(%M4),V_LINK+OPEN_CONTACT(%I2.20),CLOSED_CONTACT(%I2.19),V_LINK+CLOSED_CONTACT(%I2.24),CLOSED_CONTACT(%Q3.9),H_LINK(4),EMPTY(2);
EMPTY(1),OPEN_CONTACT(%Q3.8),H_LINK,EMPTY(8);
END_RUNG
RUNG %L2 (* Backward command *)
OPEN_CONTACT(%M3),OPEN_CONTACT(%Q3.5),H_LINK(7),V_LINK+CLOSED_CONTACT(%M7),COIL(%Q3.9);
OPEN_CONTACT(%M4),V_LINK+OPEN_CONTACT(%I2.19),CLOSED_CONTACT(%I2.20),V_LINK+CLOSED_CONTACT(%I2.24),CLOSED_CONTACT(%Q3.8),H_LINK(4),EMPTY(2);
EMPTY(1),OPEN_CONTACT(%Q3.9),H_LINK,EMPTY(8);
END_RUNG
RUNG %L3 (* High speed and low speed commands *)
OPEN_CONTACT(%M3),OPEN_CONTACT(%Q3.4),H_LINK(7),V_LINK+CLOSED_CONTACT(%M7),COIL(%Q3.10);
OPEN_CONTACT(%M4),V_LINK+OPEN_CONTACT(%I2.18),V_LINK+CLOSED_CONTACT(%I2.23),H_LINK(6),EMPTY(2);
EMPTY(1),OPEN_CONTACT(%Q3.10),EMPTY(9);
OPEN_CONTACT(%M3),OPEN_CONTACT(%Q3.3),H_LINK(7),V_LINK+CLOSED_CONTACT(%M7),COIL(%Q3.7);
OPEN_CONTACT(%M4),V_LINK+OPEN_CONTACT(%I2.23),V_LINK+CLOSED_CONTACT(%I2.18),H_LINK(6),EMPTY(2);
EMPTY(1),OPEN_CONTACT(%Q3.7),EMPTY(9);
END_RUNG
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F2rcyl1act'
LANGUAGE = LD
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
RUNG %L1 (* Work command *)
OPEN_CONTACT(%M3),OPEN_CONTACT(%M23),H_LINK(7),V_LINK+CLOSED_CONTACT(%M9),COIL(%Q3.11);
OPEN_CONTACT(%M4),OPEN_CONTACT(%I2.29),H_LINK(7),EMPTY(2);
END_RUNG
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F2lcyl1act'
LANGUAGE = LD
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
RUNG %L1 (* Work command *)
OPEN_CONTACT(%M3),OPEN_CONTACT(%M24),H_LINK(7),V_LINK+CLOSED_CONTACT(%M8),COIL(%Q3.12);
OPEN_CONTACT(%M4),OPEN_CONTACT(%I2.30),H_LINK(7),EMPTY(2);
END_RUNG
END_PROGRAM
[SOURCE_UNIT]
SU_TYPE = PROG
NAME = 'F3spinm1act'
LANGUAGE = LD
BODY = 
READ_WRITE
ADDRESS = MAST MAIN 
PROGRAM
RUNG %L1 (* Forward command *)
OPEN_CONTACT(%M3),OPEN_CONTACT(%M25),H_LINK(7),V_LINK+CLOSED_CONTACT(%M10),COIL(%Q3.0);
OPEN_CONTACT(%M4),V_LINK+OPEN_CONTACT(%I2.0),V_LINK+CLOSED_CONTACT(%I2.1),H_LINK(6),EMPTY(2);
EMPTY(1),OPEN_CONTACT(%Q3.0),EMPTY(9);
END_RUNG
END_PROGRAM
[DATA_UNIT]
DA_TYPE = 
LOCATION = 
NAME = 
BODY = 
VAR_GLOBAL
Ton_fw1 : Cb_ton;
Ton_bw1 : Cb_ton;
Ton_out1 : Cb_ton;
Ton_in1 : Cb_ton;
Ton_disc1 : Cb_ton;
Ton_out2 : Cb_ton;
Ton_in2 : Cb_ton;
Ton_disc2 : Cb_ton;
Ton_fb1 : Cb_ton;
Presetmvtrcyl1 AT %MD0 : DWORD (*in seconds*);
Presetdiscrcyl1 AT %MD4 : DWORD (*in milliseconds*);
Presetmvtlcyl1 AT %MD8 : DWORD (*in seconds*);
Presetdisclcyl1 AT %MD12 : DWORD (*in milliseconds*);
Movementfault AT %MD16 : DWORD;
Counter AT %MD18 : DWORD;
Fastdescentduration AT %MD20 : DWORD;
Slowdescentduration AT %MD22 : DWORD;
Fastascentduration AT %MD24 : DWORD;
Slowascentduration AT %MD26 : DWORD;
Motorfaultascf1 AT %MD28 : DWORD;
Clampingfaultclaf1 AT %MD30 : DWORD;
Clampingdurationclaf1 AT %MD32 : DWORD;
Releasingdurationclaf1 AT %MD34 : DWORD;
Rotationfaultspinf1 AT %MD36 : DWORD;
Unitprodwkm1 AT %M0 : EBOOL;
Batchprodwkm1 AT %M1 : EBOOL;
Emptyprodwkm1 AT %M2 : EBOOL;
Automodewkm1 AT %M3 : EBOOL;
Manualmodewkm1 AT %M4 : EBOOL;
Livewkm1 AT %M5 : EBOOL;
Emergencystatewkm1 AT %M6 : EBOOL;
F1turm1_generalfault AT %M7 : EBOOL (* : F1_TurM1 : General fault of the motor*);
F2lcyl1_generalfault AT %M8 : EBOOL (* : F2_LCYL1 : General fault of the jack*);
F2rcyl1_generalfault AT %M9 : EBOOL (* : F2_RCYL1 : General fault of the jack*);
F3spinm1_generalfault AT %M10 : EBOOL (* : F3_SpinM1 : General fault of the motor*);
F1turm1_thermalfault AT %M11 : EBOOL (* : F1_TurM1 : thermalFault*);
F1turm1_forwardfbfault AT %M12 : EBOOL (* : F1_TurM1 : forwardFBFault*);
F1turm1_backwardfbfault AT %M13 : EBOOL (* : F1_TurM1 : backwardFBFault*);
Discfltrcyl1 AT %M14 : EBOOL (*Discordance between sensors*);
Outletfltrcyl1 AT %M15 : EBOOL (*Outlet sensor fault*);
Inletfltrcyl1 AT %M16 : EBOOL (*Inlet sensor fault*);
Discfltlcyl1 AT %M17 : EBOOL (*Discordance between sensors*);
Outletfltlcyl1 AT %M18 : EBOOL (*Outlet sensor fault*);
Inletfltlcyl1 AT %M19 : EBOOL (*Inlet sensor fault*);
F3spinm1_thermalfault AT %M20 : EBOOL (* : F3_SpinM1 : thermalFault*);
F3spinm1_forwardfault AT %M21 : EBOOL (* : F3_SpinM1 : forwardFault*);
Cycleend AT %M22 : EBOOL;
Rightlockingclaf1 AT %M23 : EBOOL;
Leftlockingclaf1 AT %M24 : EBOOL;
Contactorspinf1 AT %M25 : EBOOL;
Rotation AT %M26 : EBOOL;
Faultystate AT %M27 : EBOOL;
Slowascent AT %M28 : EBOOL;
Fastascent AT %M29 : EBOOL;
Slowdescent AT %M30 : EBOOL;
Fastdescent AT %M31 : EBOOL;
Releasing AT %M32 : EBOOL;
Clamping AT %M33 : EBOOL;
Initialcond AT %M34 : EBOOL;
Nofaultcond AT %M35 : EBOOL;
Releasingokclaf1 AT %M36 : EBOOL;
Clampingokclaf1 AT %M37 : EBOOL;
Tmpboolean AT %M38 : EBOOL;
F3spinm1_forwardpb AT %I2.0 : EBOOL (*Forward pushbutton*);
F3spinm1_stoppb AT %I2.1 : EBOOL (*Stop pushbutton*);
Leftvarmode AT %I2.2 : EBOOL;
Pbpower AT %I2.3 : EBOOL;
Pbemergstop AT %I2.4 : EBOOL;
Rightvarmode AT %I2.5 : EBOOL;
Piece AT %I2.6 : EBOOL;
Leftvarcycle AT %I2.7 : EBOOL;
Pbstart AT %I2.8 : EBOOL;
F3spinm1_acknowledgepb AT %I2.9 : EBOOL (* : F3_SpinM1 : acknowledgePB*);
Rightvarcycle AT %I2.10 : EBOOL;
Backwarddeceleration AT %I2.11 : EBOOL;
Forwarddeceleration AT %I2.12 : EBOOL;
Forwardend AT %I2.13 : EBOOL;
Backwardend AT %I2.14 : EBOOL;
F1turm1_forwardfb AT %I2.15 : EBOOL (* : F1_TurM1 :*);
F1turm1_highspeedfb AT %I2.16 : EBOOL (* : F1_TurM1 :*);
F1turm1_backwardfb AT %I2.17 : EBOOL (* : F1_TurM1 :*);
F1turm1_highspeedpb AT %I2.18 : EBOOL (*High speed pushbutton*);
F1turm1_backwardpb AT %I2.19 : EBOOL (*Backward pushbutton*);
F1turm1_forwardpb AT %I2.20 : EBOOL (*Forward pushbutton*);
F1turm1_thermalfb AT %I2.21 : EBOOL (* : F1_TurM1 :*);
F1turm1_lowspeedfb AT %I2.22 : EBOOL (* : F1_TurM1 :*);
F1turm1_lowspeedpb AT %I2.23 : EBOOL (*Low speed pushbutton*);
F1turm1_stoppb AT %I2.24 : EBOOL (*Stop pushbutton*);
F2rcyl1_outletsensor AT %I2.25 : EBOOL (* : F2_RCYL1 :*);
F2rcyl1_inletsensor AT %I2.26 : EBOOL (* : F2_RCYL1 :*);
F2lcyl1_inletsensor AT %I2.27 : EBOOL (* : F2_LCYL1 :*);
F2lcyl1_outletsensor AT %I2.28 : EBOOL (* : F2_LCYL1 :*);
F2rcyl1_valveworkpb AT %I2.29 : EBOOL (*Valve work pushbutton*);
F2lcyl1_valveworkpb AT %I2.30 : EBOOL (*Valve work pushbutton*);
F3spinm1_forwardfb AT %I2.31 : EBOOL (* : F3_SpinM1 :*);
F3spinm1_thermalfb AT %I2.32 : EBOOL (* : F3_SpinM1 :*);
F3spinm1_forwardcmd AT %Q3.0 : EBOOL (* : F3_SpinM1 : Forward command*);
Loadingrequest AT %Q3.1 : EBOOL;
Unloadingrequest AT %Q3.2 : EBOOL;
Lowspeedascf1 AT %Q3.3 : EBOOL;
Highspeedascf1 AT %Q3.4 : EBOOL;
Backwardascf1 AT %Q3.5 : EBOOL;
Forwardascf1 AT %Q3.6 : EBOOL;
F1turm1_lowspeedcmd AT %Q3.7 : EBOOL (* : F1_TurM1 : Low speed command*);
F1turm1_forwardcmd AT %Q3.8 : EBOOL (* : F1_TurM1 : Forward command*);
F1turm1_backwardcmd AT %Q3.9 : EBOOL (* : F1_TurM1 : Backward command*);
F1turm1_highspeedcmd AT %Q3.10 : EBOOL (* : F1_TurM1 : High speed command*);
F2rcyl1_workcmd AT %Q3.11 : EBOOL (* : F2_RCYL1 : Work command to the valve*);
F2lcyl1_workcmd AT %Q3.12 : EBOOL (* : F2_LCYL1 : Work command to the valve*);
AT %X0.10 : EBOOL (*Wait for a new cycle
Request for a new piece*);
AT %X0.11 : EBOOL (*request for clamping of the 
work piece*);
AT %X0.12 : EBOOL (*rotation of the spindle
fast descent of the frame*);
AT %X0.13 : EBOOL (*slow descent of the frame
(for drilling of the workpiece)*);
AT %X0.14 : EBOOL (*fast ascent of the frame*);
AT %X0.15 : EBOOL (*slow ascent of the frame
stop of the spindle rotation*);
AT %X0.16 : EBOOL (*request for work piece release*);
AT %X0.17 : EBOOL (*request for unloading of the work piece*);
AT %X1.11 : EBOOL (*backward command
high speed command*);
AT %X1.21 : EBOOL (*forward command
high speed command*);
AT %X1.31 : EBOOL (*backward command
low speed command*);
AT %X1.41 : EBOOL (*forward command
low speed command*);
AT %X2.10 : EBOOL (*Wait in rest position :
clamping elements are open
Signalling releasing OK*);
AT %X2.11 : EBOOL (*Locking orders to
right element and 
left element*);
AT %X2.12 : EBOOL (*Wait in rest position :
clamping elements are closed
Signalling clamping OK*);
AT %X2.13 : EBOOL (*Unlocking orders to
right element and 
left element*);
AT %X2.14 : EBOOL (*Manual change of the situation
(no command in automatic mode)*);
AT %X3.11 : EBOOL (*contactor excitation*);
END_VAR
[EOF]
