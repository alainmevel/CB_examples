        -:    0:Source:conveyor1_cov.c
        -:    0:Graph:MinGW/conveyor1_cov.gcno
        -:    0:Data:MinGW/conveyor1_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:53-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * conveyor1_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "conveyor1.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index conveyor1__num = 0;
        -:   20:CB_Mem_Float *conveyor1_linearSpeed;
        -:   21:CB_Mem_Int *conveyor1_status_act_prod;
        -:   22:CB_Mem_Float *conveyor1_m11;
        -:   23:CB_Mem_Float *conveyor1_m12;
        -:   24:CB_Mem_Float *conveyor1_m13;
        -:   25:CB_Mem_Float *conveyor1_m14;
        -:   26:CB_Mem_Float *conveyor1_m21;
        -:   27:CB_Mem_Float *conveyor1_m22;
        -:   28:CB_Mem_Float *conveyor1_m23;
        -:   29:CB_Mem_Float *conveyor1_m24;
        -:   30:CB_Mem_Float *conveyor1_m31;
        -:   31:CB_Mem_Float *conveyor1_m32;
        -:   32:CB_Mem_Float *conveyor1_m33;
        -:   33:CB_Mem_Float *conveyor1_m34;
        -:   34:CB_Mem_Float *conveyor1_m41;
        -:   35:CB_Mem_Float *conveyor1_m42;
        -:   36:CB_Mem_Float *conveyor1_m43;
        -:   37:CB_Mem_Float *conveyor1_m44;
        -:   38:CB_Mem_Float *conveyor1_px;
        -:   39:CB_Mem_Float *conveyor1_py;
        -:   40:CB_Mem_Float *conveyor1_pz;
        -:   41:CB_Mem_Float *conveyor1_dx;
        -:   42:CB_Mem_Float *conveyor1_dy;
        -:   43:CB_Mem_Float *conveyor1_dz;
        -:   44:CB_Mem_Float *conveyor1_sProduct;
        -:   45:CB_Mem_Bool *conveyor1_interaction;
        -:   46:CB_Mem_Bool *conveyor1_d_locking;
        -:   47:CB_Mem_Bool *conveyor1_v_d_locking;
        -:   48:
        -:   49:/**************************** Variables *****************************/
        -:   50:
        -:   51:#define linearSpeed (conveyor1_linearSpeed->CB_current_value)
        -:   52:#define status_act_prod (conveyor1_status_act_prod->CB_current_value)
        -:   53:#define m11 (conveyor1_m11->CB_current_value)
        -:   54:#define m12 (conveyor1_m12->CB_current_value)
        -:   55:#define m13 (conveyor1_m13->CB_current_value)
        -:   56:#define m14 (conveyor1_m14->CB_current_value)
        -:   57:#define m21 (conveyor1_m21->CB_current_value)
        -:   58:#define m22 (conveyor1_m22->CB_current_value)
        -:   59:#define m23 (conveyor1_m23->CB_current_value)
        -:   60:#define m24 (conveyor1_m24->CB_current_value)
        -:   61:#define m31 (conveyor1_m31->CB_current_value)
        -:   62:#define m32 (conveyor1_m32->CB_current_value)
        -:   63:#define m33 (conveyor1_m33->CB_current_value)
        -:   64:#define m34 (conveyor1_m34->CB_current_value)
        -:   65:#define m41 (conveyor1_m41->CB_current_value)
        -:   66:#define m42 (conveyor1_m42->CB_current_value)
        -:   67:#define m43 (conveyor1_m43->CB_current_value)
        -:   68:#define m44 (conveyor1_m44->CB_current_value)
        -:   69:#define px (conveyor1_px->CB_current_value)
        -:   70:#define py (conveyor1_py->CB_current_value)
        -:   71:#define pz (conveyor1_pz->CB_current_value)
        -:   72:#define dx (conveyor1_dx->CB_current_value)
        -:   73:#define dy (conveyor1_dy->CB_current_value)
        -:   74:#define dz (conveyor1_dz->CB_current_value)
        -:   75:#define sProduct (conveyor1_sProduct->CB_current_value)
        -:   76:#define interaction (conveyor1_interaction->CB_current_value)
        -:   77:#define d_locking (conveyor1_d_locking->CB_current_value)
        -:   78:#define v_d_locking (conveyor1_v_d_locking->CB_current_value)
        -:   79:
        -:   80:
        -:   81:/************************ Components offsets ************************/
        -:   82:
        -:   83:
        -:   84:/********************* Initialization function **********************/
        -:   85:
        1:   86:int _tri_chain__conveyor1_init(void)
        -:   87:{
        1:   88:	(self.Float+0)->CB_current_value = 1.0; /*m11*/
        1:   89:	(self.Float+5)->CB_current_value = 1.0; /*m22*/
        1:   90:	(self.Float+10)->CB_current_value = 1.0; /*m33*/
        1:   91:	(self.Float+15)->CB_current_value = 1.0; /*m44*/
        1:   92:	self.Bool+=3;
        1:   93:	self.Int+=1;
        1:   94:	self.Float+=23;
        -:   95:
        -:   96:
        1:   97:	return 0;
        -:   98:}
        -:   99:
        -:  100:
        -:  101:/************************ Behavior function *************************/
        -:  102:
    #####:  103:int tri_chain__conveyor1(void)
        -:  104:{
        -:  105:	static char *__comp_name = "tri_chain.conveyor1";
    #####:  106:	if (exec_term_node(self_num)) {
        -:  107:
        -:  108:		/*********************** Internals variables ************************/
        -:  109:
    #####:  110:		conveyor1_status_act_prod = self.Int+0;
    #####:  111:		conveyor1_m11 = self.Float+0;
    #####:  112:		conveyor1_m12 = self.Float+1;
    #####:  113:		conveyor1_m13 = self.Float+2;
    #####:  114:		conveyor1_m14 = self.Float+3;
    #####:  115:		conveyor1_m21 = self.Float+4;
    #####:  116:		conveyor1_m22 = self.Float+5;
    #####:  117:		conveyor1_m23 = self.Float+6;
    #####:  118:		conveyor1_m24 = self.Float+7;
    #####:  119:		conveyor1_m31 = self.Float+8;
    #####:  120:		conveyor1_m32 = self.Float+9;
    #####:  121:		conveyor1_m33 = self.Float+10;
    #####:  122:		conveyor1_m34 = self.Float+11;
    #####:  123:		conveyor1_m41 = self.Float+12;
    #####:  124:		conveyor1_m42 = self.Float+13;
    #####:  125:		conveyor1_m43 = self.Float+14;
    #####:  126:		conveyor1_m44 = self.Float+15;
    #####:  127:		conveyor1_px = self.Float+16;
    #####:  128:		conveyor1_py = self.Float+17;
    #####:  129:		conveyor1_pz = self.Float+18;
    #####:  130:		conveyor1_dx = self.Float+19;
    #####:  131:		conveyor1_dy = self.Float+20;
    #####:  132:		conveyor1_dz = self.Float+21;
    #####:  133:		conveyor1_sProduct = self.Float+22;
    #####:  134:		conveyor1_interaction = self.Bool+0;
    #####:  135:		conveyor1_d_locking = self.Bool+1;
    #####:  136:		conveyor1_v_d_locking = self.Bool+2;
        -:  137:
        -:  138:		/********************* Pre-conditions execution *********************/
        -:  139:
        -:  140:		/*no Pre-conditions*/
        -:  141:
        -:  142:		/************************ Actor Myself init *************************/
        -:  143:
    #####:  144:		setMyselfFor(self_num);
        -:  145:
        -:  146:		/************************ Behavior execution ************************/
        -:  147:
        -:  148:		{
        -:  149:			/* ----------------------------------------------------------------	*/
        -:  150:			/* Type : Model of Operative Behaviour					*/
        -:  151:			/* Category :  Conveyor							*/
        -:  152:			/* Author : Dassault Systemes						*/
        -:  153:			/* Update date : June 2018							*/
        -:  154:			/* ----------------------------------------------------------------	*/
        -:  155:
        -:  156:			/* -----------------------------------------------------------------	*/
        -:  157:			/* px, py et pz are the lowest coordinates.				*/
        -:  158:			/* dx, dy et dz are the actor's dimensions 				*/
        -:  159:			/* sProduct is the absolute speed given to the product.		*/
        -:  160:			/*	CLOCK_PERIOD returns the cycle time in 1000th. of ms		*/
        -:  161:			/* The linear speed is given in mm/s.					*/
        -:  162:			/* -----------------------------------------------------------------	*/
        -:  163:
    #####:  164:			if (!d_locking)
        -:  165:				{
    #####:  166:				sProduct=linearSpeed*(CLOCK_PERIOD/1000000);
        -:  167:				}
    #####:  168:			else sProduct=0;
        -:  169:
        -:  170:		}
        -:  171:
        -:  172:
        -:  173:		/******************** Post-conditions execution *********************/
        -:  174:
        -:  175:		/*no Post-conditions*/
        -:  176:	}
        -:  177:
        -:  178:	/*************************** self update ****************************/
        -:  179:
    #####:  180:	self.Bool += 3;
    #####:  181:	self.Int += 1;
    #####:  182:	self.Float += 23;
        -:  183:
    #####:  184:	return 0;
        -:  185:}
        -:  186:
