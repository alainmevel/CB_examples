        -:    0:Source:rangesensor_cov.c
        -:    0:Graph:MinGW/rangesensor_cov.gcno
        -:    0:Data:MinGW/rangesensor_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:55-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * rangesensor_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "rangesensor.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index rangesensor__num = 0;
        -:   20:CB_Mem_Float *rangesensor_level;
        -:   21:CB_Mem_Bool *rangesensor_sensorSupply;
        -:   22:CB_Mem_Bool *rangesensor_rangeSensor;
        -:   23:CB_Mem_Int *rangesensor_status_act_prod;
        -:   24:CB_Mem_Float *rangesensor_m11;
        -:   25:CB_Mem_Float *rangesensor_m12;
        -:   26:CB_Mem_Float *rangesensor_m13;
        -:   27:CB_Mem_Float *rangesensor_m14;
        -:   28:CB_Mem_Float *rangesensor_m21;
        -:   29:CB_Mem_Float *rangesensor_m22;
        -:   30:CB_Mem_Float *rangesensor_m23;
        -:   31:CB_Mem_Float *rangesensor_m24;
        -:   32:CB_Mem_Float *rangesensor_m31;
        -:   33:CB_Mem_Float *rangesensor_m32;
        -:   34:CB_Mem_Float *rangesensor_m33;
        -:   35:CB_Mem_Float *rangesensor_m34;
        -:   36:CB_Mem_Float *rangesensor_m41;
        -:   37:CB_Mem_Float *rangesensor_m42;
        -:   38:CB_Mem_Float *rangesensor_m43;
        -:   39:CB_Mem_Float *rangesensor_m44;
        -:   40:CB_Mem_Float *rangesensor_threshold;
        -:   41:CB_Mem_Float *rangesensor_range;
        -:   42:CB_Mem_Bool *rangesensor_wiringLogic;
        -:   43:CB_Mem_Bool *rangesensor_d_sensor;
        -:   44:CB_Mem_Bool *rangesensor_v_d_sensor;
        -:   45:
        -:   46:/**************************** Variables *****************************/
        -:   47:
        -:   48:#define level (rangesensor_level->CB_current_value)
        -:   49:#define sensorSupply (rangesensor_sensorSupply->CB_current_value)
        -:   50:#define rangeSensor (rangesensor_rangeSensor->CB_current_value)
        -:   51:#define status_act_prod (rangesensor_status_act_prod->CB_current_value)
        -:   52:#define m11 (rangesensor_m11->CB_current_value)
        -:   53:#define m12 (rangesensor_m12->CB_current_value)
        -:   54:#define m13 (rangesensor_m13->CB_current_value)
        -:   55:#define m14 (rangesensor_m14->CB_current_value)
        -:   56:#define m21 (rangesensor_m21->CB_current_value)
        -:   57:#define m22 (rangesensor_m22->CB_current_value)
        -:   58:#define m23 (rangesensor_m23->CB_current_value)
        -:   59:#define m24 (rangesensor_m24->CB_current_value)
        -:   60:#define m31 (rangesensor_m31->CB_current_value)
        -:   61:#define m32 (rangesensor_m32->CB_current_value)
        -:   62:#define m33 (rangesensor_m33->CB_current_value)
        -:   63:#define m34 (rangesensor_m34->CB_current_value)
        -:   64:#define m41 (rangesensor_m41->CB_current_value)
        -:   65:#define m42 (rangesensor_m42->CB_current_value)
        -:   66:#define m43 (rangesensor_m43->CB_current_value)
        -:   67:#define m44 (rangesensor_m44->CB_current_value)
        -:   68:#define threshold (rangesensor_threshold->CB_current_value)
        -:   69:#define range (rangesensor_range->CB_current_value)
        -:   70:#define wiringLogic (rangesensor_wiringLogic->CB_current_value)
        -:   71:#define d_sensor (rangesensor_d_sensor->CB_current_value)
        -:   72:#define v_d_sensor (rangesensor_v_d_sensor->CB_current_value)
        -:   73:
        -:   74:
        -:   75:/************************ Components offsets ************************/
        -:   76:
        -:   77:
        -:   78:/********************* Initialization function **********************/
        -:   79:
        1:   80:int _tri_chain__rangesensor_init(void)
        -:   81:{
        1:   82:	(rangesensor_sensorSupply)->CB_current_value = 1; /*sensorSupply*/
        1:   83:	(self.Float+0)->CB_current_value = 1.0; /*m11*/
        1:   84:	(self.Float+5)->CB_current_value = 1.0; /*m22*/
        1:   85:	(self.Float+10)->CB_current_value = 1.0; /*m33*/
        1:   86:	(self.Float+15)->CB_current_value = 1.0; /*m44*/
        1:   87:	(self.Float+16)->CB_current_value = 500.0; /*threshold*/
        1:   88:	(self.Float+17)->CB_current_value = 10.0; /*range*/
        1:   89:	(self.Bool+0)->CB_current_value = 1; /*wiringLogic*/
        1:   90:	self.Bool+=3;
        1:   91:	self.Int+=1;
        1:   92:	self.Float+=18;
        -:   93:
        -:   94:
        1:   95:	return 0;
        -:   96:}
        -:   97:
        -:   98:
        -:   99:/************************ Behavior function *************************/
        -:  100:
        1:  101:int tri_chain__rangesensor(void)
        -:  102:{
        -:  103:	static char *__comp_name = "tri_chain.rangesensor";
        1:  104:	if (exec_term_node(self_num)) {
        -:  105:
        -:  106:		/*********************** Internals variables ************************/
        -:  107:
        1:  108:		rangesensor_status_act_prod = self.Int+0;
        1:  109:		rangesensor_m11 = self.Float+0;
        1:  110:		rangesensor_m12 = self.Float+1;
        1:  111:		rangesensor_m13 = self.Float+2;
        1:  112:		rangesensor_m14 = self.Float+3;
        1:  113:		rangesensor_m21 = self.Float+4;
        1:  114:		rangesensor_m22 = self.Float+5;
        1:  115:		rangesensor_m23 = self.Float+6;
        1:  116:		rangesensor_m24 = self.Float+7;
        1:  117:		rangesensor_m31 = self.Float+8;
        1:  118:		rangesensor_m32 = self.Float+9;
        1:  119:		rangesensor_m33 = self.Float+10;
        1:  120:		rangesensor_m34 = self.Float+11;
        1:  121:		rangesensor_m41 = self.Float+12;
        1:  122:		rangesensor_m42 = self.Float+13;
        1:  123:		rangesensor_m43 = self.Float+14;
        1:  124:		rangesensor_m44 = self.Float+15;
        1:  125:		rangesensor_threshold = self.Float+16;
        1:  126:		rangesensor_range = self.Float+17;
        1:  127:		rangesensor_wiringLogic = self.Bool+0;
        1:  128:		rangesensor_d_sensor = self.Bool+1;
        1:  129:		rangesensor_v_d_sensor = self.Bool+2;
        -:  130:
        -:  131:		/********************* Pre-conditions execution *********************/
        -:  132:
        -:  133:		/*no Pre-conditions*/
        -:  134:
        -:  135:		/************************ Actor Myself init *************************/
        -:  136:
        1:  137:		setMyselfFor(self_num);
        -:  138:
        -:  139:		/************************ Behavior execution ************************/
        -:  140:
        -:  141:		{
        -:  142:			/* ----------------------------------------------------------------	*/
        -:  143:			/* Type : Model of Operative Behaviour					*/
        -:  144:			/* Category :  Sensors							*/
        -:  145:			/* Author : Dassault Systemes						*/
        -:  146:			/* Update date : June 2018							*/
        -:  147:			/* ----------------------------------------------------------------	*/
        -:  148:			/* This module simulates the behaviour 					*/
        -:  149:			/* of an over threshold sensor with a detection area.			*/
        -:  150:			/* ----------------------------------------------------------------	*/
        -:  151:			/* In the case of a faulty element, it takes the fault value else 	*/
        -:  152:			/* it takes the state of the sensor in function of its wiring logic.	*/ 
        -:  153:			/* ----------------------------------------------------------------	*/
        -:  154:
        1:  155:			if (d_sensor) rangeSensor = v_d_sensor;
        -:  156:			else
        1:  157:				if ( sensorSupply ) rangeSensor = ((level >= threshold) & (level <= (threshold + range))) ^ ! wiringLogic;
    #####:  158:				else rangeSensor = 0;
        -:  159:
        -:  160:		}
        -:  161:
        1:  162:		CB_post_bool(rangesensor_rangeSensor);
        -:  163:
        -:  164:		/******************** Post-conditions execution *********************/
        -:  165:
        -:  166:		/*no Post-conditions*/
        -:  167:	}
        -:  168:
        -:  169:	/*************************** self update ****************************/
        -:  170:
        1:  171:	self.Bool += 3;
        1:  172:	self.Int += 1;
        1:  173:	self.Float += 18;
        -:  174:
        1:  175:	return 0;
        -:  176:}
        -:  177:
