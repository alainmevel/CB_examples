        -:    0:Source:motor2dir_1speed_cov.c
        -:    0:Graph:MinGW/motor2dir_1speed_cov.gcno
        -:    0:Data:MinGW/motor2dir_1speed_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:54-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * motor2dir_1speed_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "motor2dir_1speed.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index motor2dir_1speed__num = 0;
        -:   20:CB_Mem_Bool *motor2dir_1speed_forward;
        -:   21:CB_Mem_Bool *motor2dir_1speed_backward;
        -:   22:CB_Mem_Bool *motor2dir_1speed_cmdSupply;
        -:   23:CB_Mem_Bool *motor2dir_1speed_sensorSupply;
        -:   24:CB_Mem_Bool *motor2dir_1speed_voltage380;
        -:   25:CB_Mem_Float *motor2dir_1speed_speedVal;
        -:   26:CB_Mem_Float *motor2dir_1speed_speedPercent;
        -:   27:CB_Mem_Bool *motor2dir_1speed_thermal;
        -:   28:CB_Mem_Bool *motor2dir_1speed_backwardFB;
        -:   29:CB_Mem_Bool *motor2dir_1speed_forwardFB;
        -:   30:CB_Mem_Float *motor2dir_1speed_increment;
        -:   31:CB_Mem_Bool *motor2dir_1speed_memoFwd;
        -:   32:CB_Mem_Bool *motor2dir_1speed_memoBwd;
        -:   33:CB_Mem_Bool *motor2dir_1speed_forwardState;
        -:   34:CB_Mem_Bool *motor2dir_1speed_backwardState;
        -:   35:CB_Mem_Float *motor2dir_1speed_wantedSpeed;
        -:   36:CB_Mem_Float *motor2dir_1speed_nominalSpeed;
        -:   37:CB_Mem_Float *motor2dir_1speed_nominalTime;
        -:   38:CB_Mem_Bool *motor2dir_1speed_thermalLogic;
        -:   39:CB_Mem_Bool *motor2dir_1speed_fwdFbLogic;
        -:   40:CB_Mem_Bool *motor2dir_1speed_bwdFbLogic;
        -:   41:CB_Mem_Bool *motor2dir_1speed_d_locking;
        -:   42:CB_Mem_Float *motor2dir_1speed_v_d_locking;
        -:   43:CB_Mem_Bool *motor2dir_1speed_d_electrical;
        -:   44:CB_Mem_Bool *motor2dir_1speed_v_d_electrical;
        -:   45:CB_Mem_Bool *motor2dir_1speed_d_backwardFB;
        -:   46:CB_Mem_Bool *motor2dir_1speed_v_d_backwardFB;
        -:   47:CB_Mem_Bool *motor2dir_1speed_d_forwardFB;
        -:   48:CB_Mem_Bool *motor2dir_1speed_v_d_forwardFB;
        -:   49:
        -:   50:/**************************** Variables *****************************/
        -:   51:
        -:   52:#define forward (motor2dir_1speed_forward->CB_current_value)
        -:   53:#define backward (motor2dir_1speed_backward->CB_current_value)
        -:   54:#define cmdSupply (motor2dir_1speed_cmdSupply->CB_current_value)
        -:   55:#define sensorSupply (motor2dir_1speed_sensorSupply->CB_current_value)
        -:   56:#define voltage380 (motor2dir_1speed_voltage380->CB_current_value)
        -:   57:#define speedVal (motor2dir_1speed_speedVal->CB_current_value)
        -:   58:#define speedPercent (motor2dir_1speed_speedPercent->CB_current_value)
        -:   59:#define thermal (motor2dir_1speed_thermal->CB_current_value)
        -:   60:#define backwardFB (motor2dir_1speed_backwardFB->CB_current_value)
        -:   61:#define forwardFB (motor2dir_1speed_forwardFB->CB_current_value)
        -:   62:#define increment (motor2dir_1speed_increment->CB_current_value)
        -:   63:#define memoFwd (motor2dir_1speed_memoFwd->CB_current_value)
        -:   64:#define memoBwd (motor2dir_1speed_memoBwd->CB_current_value)
        -:   65:#define forwardState (motor2dir_1speed_forwardState->CB_current_value)
        -:   66:#define backwardState (motor2dir_1speed_backwardState->CB_current_value)
        -:   67:#define wantedSpeed (motor2dir_1speed_wantedSpeed->CB_current_value)
        -:   68:#define nominalSpeed (motor2dir_1speed_nominalSpeed->CB_current_value)
        -:   69:#define nominalTime (motor2dir_1speed_nominalTime->CB_current_value)
        -:   70:#define thermalLogic (motor2dir_1speed_thermalLogic->CB_current_value)
        -:   71:#define fwdFbLogic (motor2dir_1speed_fwdFbLogic->CB_current_value)
        -:   72:#define bwdFbLogic (motor2dir_1speed_bwdFbLogic->CB_current_value)
        -:   73:#define d_locking (motor2dir_1speed_d_locking->CB_current_value)
        -:   74:#define v_d_locking (motor2dir_1speed_v_d_locking->CB_current_value)
        -:   75:#define d_electrical (motor2dir_1speed_d_electrical->CB_current_value)
        -:   76:#define v_d_electrical (motor2dir_1speed_v_d_electrical->CB_current_value)
        -:   77:#define d_backwardFB (motor2dir_1speed_d_backwardFB->CB_current_value)
        -:   78:#define v_d_backwardFB (motor2dir_1speed_v_d_backwardFB->CB_current_value)
        -:   79:#define d_forwardFB (motor2dir_1speed_d_forwardFB->CB_current_value)
        -:   80:#define v_d_forwardFB (motor2dir_1speed_v_d_forwardFB->CB_current_value)
        -:   81:
        -:   82:
        -:   83:/************************ Components offsets ************************/
        -:   84:
        -:   85:
        -:   86:/********************* Initialization function **********************/
        -:   87:
        1:   88:int _tri_chain__motor2dir_1speed_init(void)
        -:   89:{
        1:   90:	(motor2dir_1speed_cmdSupply)->CB_current_value = 1; /*cmdSupply*/
        1:   91:	(motor2dir_1speed_sensorSupply)->CB_current_value = 1; /*sensorSupply*/
        1:   92:	(motor2dir_1speed_voltage380)->CB_current_value = 1; /*voltage380*/
        1:   93:	(self.Float+2)->CB_current_value = 5000.0; /*nominalSpeed*/
        1:   94:	(self.Float+3)->CB_current_value = 0.5; /*nominalTime*/
        1:   95:	(self.Bool+5)->CB_current_value = 1; /*fwdFbLogic*/
        1:   96:	(self.Bool+6)->CB_current_value = 1; /*bwdFbLogic*/
        1:   97:	self.Bool+=14;
        1:   98:	self.Float+=5;
        -:   99:
        -:  100:
        1:  101:	return 0;
        -:  102:}
        -:  103:
        -:  104:
        -:  105:/************************ Behavior function *************************/
        -:  106:
        1:  107:int tri_chain__motor2dir_1speed(void)
        -:  108:{
        -:  109:	static char *__comp_name = "tri_chain.motor2dir_1speed";
        1:  110:	if (exec_term_node(self_num)) {
        -:  111:
        -:  112:		/*********************** Internals variables ************************/
        -:  113:
        1:  114:		motor2dir_1speed_increment = self.Float+0;
        1:  115:		motor2dir_1speed_memoFwd = self.Bool+0;
        1:  116:		motor2dir_1speed_memoBwd = self.Bool+1;
        1:  117:		motor2dir_1speed_forwardState = self.Bool+2;
        1:  118:		motor2dir_1speed_backwardState = self.Bool+3;
        1:  119:		motor2dir_1speed_wantedSpeed = self.Float+1;
        1:  120:		motor2dir_1speed_nominalSpeed = self.Float+2;
        1:  121:		motor2dir_1speed_nominalTime = self.Float+3;
        1:  122:		motor2dir_1speed_thermalLogic = self.Bool+4;
        1:  123:		motor2dir_1speed_fwdFbLogic = self.Bool+5;
        1:  124:		motor2dir_1speed_bwdFbLogic = self.Bool+6;
        1:  125:		motor2dir_1speed_d_locking = self.Bool+7;
        1:  126:		motor2dir_1speed_v_d_locking = self.Float+4;
        1:  127:		motor2dir_1speed_d_electrical = self.Bool+8;
        1:  128:		motor2dir_1speed_v_d_electrical = self.Bool+9;
        1:  129:		motor2dir_1speed_d_backwardFB = self.Bool+10;
        1:  130:		motor2dir_1speed_v_d_backwardFB = self.Bool+11;
        1:  131:		motor2dir_1speed_d_forwardFB = self.Bool+12;
        1:  132:		motor2dir_1speed_v_d_forwardFB = self.Bool+13;
        -:  133:
        -:  134:		/********************* Pre-conditions execution *********************/
        -:  135:
        -:  136:		/*no Pre-conditions*/
        -:  137:
        -:  138:		/************************ Behavior execution ************************/
        -:  139:
        -:  140:		{
        -:  141:			/* ----------------------------------------------------------------	*/
        -:  142:			/* Type : Model of Operative Behaviour					*/
        -:  143:			/* Category :  Associations - motors					*/
        -:  144:			/* Author : Dassault Systemes						*/
        -:  145:			/* Update date : June 2018							*/
        -:  146:			/* ----------------------------------------------------------------	*/
        -:  147:			/* This module simulates a motor with 2 directions and 1 speed	*/
        -:  148:			/* and its electrical control logic.					*/
        -:  149:			/* ----------------------------------------------------------------	*/
        -:  150:
        -:  151:
        -:  152:			/* ----------------------------------------------------------------	*/
        -:  153:			/* Management of orders from Control Part					*/
        -:  154:			/*	if there is no power supply for command 				*/
        -:  155:			/*     	the contactors don't understand the control order	*/
        -:  156:			/*	The contactors cannot be active in the same time		*/
        -:  157:			/*	 	(mechanical security).					*/
        -:  158:			/* ----------------------------------------------------------------	*/
        1:  159:			if (forward && !memoBwd && cmdSupply) memoFwd = 1;
        1:  160:			if (!forward || !cmdSupply || d_electrical) memoFwd = 0;
        1:  161:			if (!memoFwd && backward && cmdSupply) memoBwd = 1;
        1:  162:			if (!backward || !cmdSupply || d_electrical) memoBwd = 0;
        -:  163:
        -:  164:			/* ----------------------------------------------------------------	*/
        -:  165:			/* Calculation of the on-state of contactor				*/
        -:  166:			/* ----------------------------------------------------------------	*/
        1:  167:			forwardState= memoFwd & voltage380;
        1:  168:			backwardState = memoBwd & voltage380;
        -:  169:
        -:  170:
        -:  171:			/* ----------------------------------------------------------------	*/
        -:  172:			/* Management of the speed ramp						*/
        -:  173:			/* ----------------------------------------------------------------	*/
        1:  174:			if (d_locking)  speedVal = v_d_locking;
        -:  175:			else {
        -:  176:				/* Compute the increment of translation according to the simulation clock	*/
        1:  177:				if (nominalTime > 0.0)
        1:  178:					increment = (nominalSpeed / nominalTime) * (CLOCK_PERIOD/1000000.0);
        -:  179:
        -:  180:				/* Compute the wanted speed	*/
        1:  181:				if (forwardState) wantedSpeed = nominalSpeed;
        1:  182:				if (backwardState) wantedSpeed = nominalSpeed * -1.0;
        1:  183:				if (! forwardState && ! backwardState) wantedSpeed = 0.0;
        -:  184:
        -:  185:				/* Compute the speed ramp	*/
        1:  186:				if ( speedVal < wantedSpeed ) {
    #####:  187:					speedVal += increment;
    #####:  188:					if (speedVal > wantedSpeed)  speedVal = wantedSpeed;
        -:  189:				}
        1:  190:				if ( speedVal > wantedSpeed ) {
    #####:  191:					speedVal -= increment;
    #####:  192:					if (speedVal < wantedSpeed)  speedVal = wantedSpeed;
        -:  193:				}
        -:  194:			}
        -:  195:
        -:  196:			/* ----------------------------------------------------------------	*/
        -:  197:			/* Compute the percentage between the current and nominal speed	*/
        -:  198:			/* ----------------------------------------------------------------	*/
        1:  199:			if (nominalSpeed != 0.0) 
        1:  200:				speedPercent = ((speedVal/nominalSpeed)*100);
        -:  201:
        -:  202:
        -:  203:			/* ----------------------------------------------------------------	*/
        -:  204:			/* Management of the thermal feedback					*/
        -:  205:			/* ----------------------------------------------------------------	*/
        1:  206:			if (d_electrical) thermal=v_d_electrical;
        -:  207:			else
        1:  208:				if (sensorSupply) thermal= ! thermalLogic;
    #####:  209:				else thermal=0;
        -:  210:
        -:  211:			/* ----------------------------------------------------------------	*/
        -:  212:			/* Management of feedback to Control Part					*/
        -:  213:			/*     if a fault is required, the contactor feed-back 		*/
        -:  214:			/*		 takes a preset state.					*/
        -:  215:			/*	if there is no power supply for sensors 				*/
        -:  216:			/*         contactor feed-back returns nothing				*/
        -:  217:			/*     else contactor feed-back returns the contactor state combined	*/
        -:  218:			/*	    with wiring logic.						*/
        -:  219:			/* ----------------------------------------------------------------	*/
        1:  220:			if (d_forwardFB) forwardFB=v_d_forwardFB;
        -:  221:			else
        1:  222:				if (sensorSupply) forwardFB=(memoFwd ^ ! fwdFbLogic);
    #####:  223:				else forwardFB=0;
        -:  224:
        1:  225:			if (d_backwardFB) backwardFB=v_d_backwardFB;
        -:  226:			else
        1:  227:				if (sensorSupply) backwardFB=(memoBwd ^ ! bwdFbLogic);
    #####:  228:				else backwardFB=0;
        -:  229:
        -:  230:		}
        -:  231:
        1:  232:		CB_post_float(motor2dir_1speed_speedVal);
        1:  233:		CB_post_float(motor2dir_1speed_speedPercent);
        1:  234:		CB_post_bool(motor2dir_1speed_thermal);
        1:  235:		CB_post_bool(motor2dir_1speed_backwardFB);
        1:  236:		CB_post_bool(motor2dir_1speed_forwardFB);
        -:  237:
        -:  238:		/******************** Post-conditions execution *********************/
        -:  239:
        -:  240:		/*no Post-conditions*/
        -:  241:	}
        -:  242:
        -:  243:	/*************************** self update ****************************/
        -:  244:
        1:  245:	self.Bool += 14;
        1:  246:	self.Float += 5;
        -:  247:
        1:  248:	return 0;
        -:  249:}
        -:  250:
