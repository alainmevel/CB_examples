        -:    0:Source:motor1dir_1speed_cov.c
        -:    0:Graph:MinGW/motor1dir_1speed_cov.gcno
        -:    0:Data:MinGW/motor1dir_1speed_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:52-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * motor1dir_1speed_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "motor1dir_1speed.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index motor1dir_1speed__num = 0;
        -:   20:CB_Mem_Bool *motor1dir_1speed_forward;
        -:   21:CB_Mem_Bool *motor1dir_1speed_cmdSupply;
        -:   22:CB_Mem_Bool *motor1dir_1speed_sensorSupply;
        -:   23:CB_Mem_Bool *motor1dir_1speed_voltage380;
        -:   24:CB_Mem_Float *motor1dir_1speed_speedVal;
        -:   25:CB_Mem_Float *motor1dir_1speed_speedPercent;
        -:   26:CB_Mem_Bool *motor1dir_1speed_thermal;
        -:   27:CB_Mem_Bool *motor1dir_1speed_forwardFB;
        -:   28:CB_Mem_Float *motor1dir_1speed_increment;
        -:   29:CB_Mem_Bool *motor1dir_1speed_memoFwd;
        -:   30:CB_Mem_Bool *motor1dir_1speed_forwardState;
        -:   31:CB_Mem_Float *motor1dir_1speed_wantedSpeed;
        -:   32:CB_Mem_Float *motor1dir_1speed_nominalSpeed;
        -:   33:CB_Mem_Float *motor1dir_1speed_nominalTime;
        -:   34:CB_Mem_Bool *motor1dir_1speed_thermalLogic;
        -:   35:CB_Mem_Bool *motor1dir_1speed_feedbackLogic;
        -:   36:CB_Mem_Bool *motor1dir_1speed_d_locking;
        -:   37:CB_Mem_Float *motor1dir_1speed_v_d_locking;
        -:   38:CB_Mem_Bool *motor1dir_1speed_d_feedback;
        -:   39:CB_Mem_Bool *motor1dir_1speed_v_d_feedback;
        -:   40:CB_Mem_Bool *motor1dir_1speed_d_electrical;
        -:   41:CB_Mem_Bool *motor1dir_1speed_v_d_electrical;
        -:   42:
        -:   43:/**************************** Variables *****************************/
        -:   44:
        -:   45:#define forward (motor1dir_1speed_forward->CB_current_value)
        -:   46:#define cmdSupply (motor1dir_1speed_cmdSupply->CB_current_value)
        -:   47:#define sensorSupply (motor1dir_1speed_sensorSupply->CB_current_value)
        -:   48:#define voltage380 (motor1dir_1speed_voltage380->CB_current_value)
        -:   49:#define speedVal (motor1dir_1speed_speedVal->CB_current_value)
        -:   50:#define speedPercent (motor1dir_1speed_speedPercent->CB_current_value)
        -:   51:#define thermal (motor1dir_1speed_thermal->CB_current_value)
        -:   52:#define forwardFB (motor1dir_1speed_forwardFB->CB_current_value)
        -:   53:#define increment (motor1dir_1speed_increment->CB_current_value)
        -:   54:#define memoFwd (motor1dir_1speed_memoFwd->CB_current_value)
        -:   55:#define forwardState (motor1dir_1speed_forwardState->CB_current_value)
        -:   56:#define wantedSpeed (motor1dir_1speed_wantedSpeed->CB_current_value)
        -:   57:#define nominalSpeed (motor1dir_1speed_nominalSpeed->CB_current_value)
        -:   58:#define nominalTime (motor1dir_1speed_nominalTime->CB_current_value)
        -:   59:#define thermalLogic (motor1dir_1speed_thermalLogic->CB_current_value)
        -:   60:#define feedbackLogic (motor1dir_1speed_feedbackLogic->CB_current_value)
        -:   61:#define d_locking (motor1dir_1speed_d_locking->CB_current_value)
        -:   62:#define v_d_locking (motor1dir_1speed_v_d_locking->CB_current_value)
        -:   63:#define d_feedback (motor1dir_1speed_d_feedback->CB_current_value)
        -:   64:#define v_d_feedback (motor1dir_1speed_v_d_feedback->CB_current_value)
        -:   65:#define d_electrical (motor1dir_1speed_d_electrical->CB_current_value)
        -:   66:#define v_d_electrical (motor1dir_1speed_v_d_electrical->CB_current_value)
        -:   67:
        -:   68:
        -:   69:/************************ Components offsets ************************/
        -:   70:
        -:   71:
        -:   72:/********************* Initialization function **********************/
        -:   73:
        1:   74:int _tri_chain__motor1dir_1speed_init(void)
        -:   75:{
        1:   76:	(motor1dir_1speed_cmdSupply)->CB_current_value = 1; /*cmdSupply*/
        1:   77:	(motor1dir_1speed_sensorSupply)->CB_current_value = 1; /*sensorSupply*/
        1:   78:	(motor1dir_1speed_voltage380)->CB_current_value = 1; /*voltage380*/
        1:   79:	(self.Float+2)->CB_current_value = 5000.0; /*nominalSpeed*/
        1:   80:	(self.Float+3)->CB_current_value = 0.5; /*nominalTime*/
        1:   81:	(self.Bool+3)->CB_current_value = 1; /*feedbackLogic*/
        1:   82:	self.Bool+=9;
        1:   83:	self.Float+=5;
        -:   84:
        -:   85:
        1:   86:	return 0;
        -:   87:}
        -:   88:
        -:   89:
        -:   90:/************************ Behavior function *************************/
        -:   91:
        1:   92:int tri_chain__motor1dir_1speed(void)
        -:   93:{
        -:   94:	static char *__comp_name = "tri_chain.motor1dir_1speed";
        1:   95:	if (exec_term_node(self_num)) {
        -:   96:
        -:   97:		/*********************** Internals variables ************************/
        -:   98:
        1:   99:		motor1dir_1speed_increment = self.Float+0;
        1:  100:		motor1dir_1speed_memoFwd = self.Bool+0;
        1:  101:		motor1dir_1speed_forwardState = self.Bool+1;
        1:  102:		motor1dir_1speed_wantedSpeed = self.Float+1;
        1:  103:		motor1dir_1speed_nominalSpeed = self.Float+2;
        1:  104:		motor1dir_1speed_nominalTime = self.Float+3;
        1:  105:		motor1dir_1speed_thermalLogic = self.Bool+2;
        1:  106:		motor1dir_1speed_feedbackLogic = self.Bool+3;
        1:  107:		motor1dir_1speed_d_locking = self.Bool+4;
        1:  108:		motor1dir_1speed_v_d_locking = self.Float+4;
        1:  109:		motor1dir_1speed_d_feedback = self.Bool+5;
        1:  110:		motor1dir_1speed_v_d_feedback = self.Bool+6;
        1:  111:		motor1dir_1speed_d_electrical = self.Bool+7;
        1:  112:		motor1dir_1speed_v_d_electrical = self.Bool+8;
        -:  113:
        -:  114:		/********************* Pre-conditions execution *********************/
        -:  115:
        -:  116:		/*no Pre-conditions*/
        -:  117:
        -:  118:		/************************ Behavior execution ************************/
        -:  119:
        -:  120:		{
        -:  121:			/* ----------------------------------------------------------------	*/
        -:  122:			/* Type : Model of Operative Behaviour					*/
        -:  123:			/* Category :  Associations - motors					*/
        -:  124:			/* Author : Techniques Nouvelles d'Informatique				*/
        -:  125:			/* Update date : October 2002						*/
        -:  126:			/* ----------------------------------------------------------------	*/
        -:  127:			/* This module simulates a motor with one direction and one speed	*/
        -:  128:			/* and its electrical control logic.					*/
        -:  129:			/* ----------------------------------------------------------------	*/
        -:  130:
        -:  131:
        -:  132:			/* ----------------------------------------------------------------	*/
        -:  133:			/* Management of orders from Control Part					*/
        -:  134:			/*	if there is no power supply for command 				*/
        -:  135:			/*     the contactor doesn't understand the control order		*/
        -:  136:			/* ----------------------------------------------------------------	*/
        1:  137:			memoFwd=forward & cmdSupply & ! d_electrical;
        -:  138:
        -:  139:			/* ----------------------------------------------------------------	*/
        -:  140:			/* Calculation of the on-state of contactor				*/
        -:  141:			/* ----------------------------------------------------------------	*/
        1:  142:			forwardState=memoFwd & voltage380;
        -:  143:
        -:  144:			/* ----------------------------------------------------------------	*/
        -:  145:			/* Management of the speed ramp						*/
        -:  146:			/* ----------------------------------------------------------------	*/
        1:  147:			if (d_locking) speedVal=v_d_locking;
        -:  148:			else {
        -:  149:				/* Compute the increment of translation according to the simulation clock	*/
        1:  150:				if (nominalTime > 0.0)
        1:  151:					increment = (nominalSpeed/nominalTime) * (CLOCK_PERIOD/1000000.0);
        -:  152:
        -:  153:				/* Compute the speed	*/
        1:  154:				if (forwardState) wantedSpeed = nominalSpeed;
        1:  155:				else wantedSpeed = 0.0;
        -:  156:
        1:  157:				if ( speedVal < wantedSpeed) {
    #####:  158:					speedVal += increment;
    #####:  159:					if ( speedVal > wantedSpeed) speedVal = wantedSpeed;
        -:  160:				}
        1:  161:				if ( speedVal > wantedSpeed) {
    #####:  162:					speedVal -= increment;
    #####:  163:					if (speedVal < 0.0) speedVal = 0.0;
        -:  164:				}
        -:  165:			}
        -:  166:
        -:  167:			/* ----------------------------------------------------------------	*/
        -:  168:			/* Compute the percentage between the current and nominal speed	*/
        -:  169:			/* ----------------------------------------------------------------	*/
        1:  170:			if (nominalSpeed != 0.0)
        1:  171:				speedPercent = ((speedVal/nominalSpeed)*100);
        -:  172:
        -:  173:			/* ----------------------------------------------------------------	*/
        -:  174:			/* Management of the thermal feedback					*/
        -:  175:			/* ----------------------------------------------------------------	*/
        1:  176:			if (d_electrical) thermal = v_d_electrical;
        -:  177:			else
        1:  178:				if (sensorSupply) thermal = ! thermalLogic;
    #####:  179:				else thermal = 0;
        -:  180:
        -:  181:
        -:  182:			/* ----------------------------------------------------------------	*/
        -:  183:			/* Management of feedback to Control Part					*/
        -:  184:			/*     if a fault is required, the contactor feed-back 		*/
        -:  185:			/*		 takes a preset state.					*/
        -:  186:			/*	if there is no power supply for sensors 				*/
        -:  187:			/*         contactor feed-back returns nothing				*/
        -:  188:			/*     else contactor feed-back returns the contactor state combined	*/
        -:  189:			/*	    with wiring logic.						*/
        -:  190:			/* ----------------------------------------------------------------	*/
        1:  191:			if (d_feedback) forwardFB = v_d_feedback;
        -:  192:			else
        1:  193:				if (sensorSupply) forwardFB = (memoFwd ^ ! feedbackLogic);
    #####:  194:				else forwardFB = 0;
        -:  195:
        -:  196:
        -:  197:
        -:  198:
        -:  199:		}
        -:  200:
        1:  201:		CB_post_float(motor1dir_1speed_speedVal);
        1:  202:		CB_post_float(motor1dir_1speed_speedPercent);
        1:  203:		CB_post_bool(motor1dir_1speed_thermal);
        1:  204:		CB_post_bool(motor1dir_1speed_forwardFB);
        -:  205:
        -:  206:		/******************** Post-conditions execution *********************/
        -:  207:
        -:  208:		/*no Post-conditions*/
        -:  209:	}
        -:  210:
        -:  211:	/*************************** self update ****************************/
        -:  212:
        1:  213:	self.Bool += 9;
        1:  214:	self.Float += 5;
        -:  215:
        1:  216:	return 0;
        -:  217:}
        -:  218:
