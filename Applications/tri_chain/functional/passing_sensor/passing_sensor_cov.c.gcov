        -:    0:Source:passing_sensor_cov.c
        -:    0:Graph:MinGW/passing_sensor_cov.gcno
        -:    0:Data:MinGW/passing_sensor_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:57-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * passing_sensor_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "passing_sensor.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index passing_sensor__num = 0;
        -:   20:CB_Mem_Bool *passing_sensor_sensorSupply;
        -:   21:CB_Mem_Bool *passing_sensor_passing;
        -:   22:CB_Mem_Int *passing_sensor_status_act_prod;
        -:   23:CB_Mem_Float *passing_sensor_m11;
        -:   24:CB_Mem_Float *passing_sensor_m12;
        -:   25:CB_Mem_Float *passing_sensor_m13;
        -:   26:CB_Mem_Float *passing_sensor_m14;
        -:   27:CB_Mem_Float *passing_sensor_m21;
        -:   28:CB_Mem_Float *passing_sensor_m22;
        -:   29:CB_Mem_Float *passing_sensor_m23;
        -:   30:CB_Mem_Float *passing_sensor_m24;
        -:   31:CB_Mem_Float *passing_sensor_m31;
        -:   32:CB_Mem_Float *passing_sensor_m32;
        -:   33:CB_Mem_Float *passing_sensor_m33;
        -:   34:CB_Mem_Float *passing_sensor_m34;
        -:   35:CB_Mem_Float *passing_sensor_m41;
        -:   36:CB_Mem_Float *passing_sensor_m42;
        -:   37:CB_Mem_Float *passing_sensor_m43;
        -:   38:CB_Mem_Float *passing_sensor_m44;
        -:   39:CB_Mem_Float *passing_sensor_px;
        -:   40:CB_Mem_Float *passing_sensor_py;
        -:   41:CB_Mem_Float *passing_sensor_pz;
        -:   42:CB_Mem_Float *passing_sensor_dx;
        -:   43:CB_Mem_Float *passing_sensor_dy;
        -:   44:CB_Mem_Float *passing_sensor_dz;
        -:   45:CB_Mem_Bool *passing_sensor_detection;
        -:   46:CB_Mem_Bool *passing_sensor_passingLogic;
        -:   47:CB_Mem_Bool *passing_sensor_d_passing;
        -:   48:CB_Mem_Bool *passing_sensor_v_d_passing;
        -:   49:
        -:   50:/**************************** Variables *****************************/
        -:   51:
        -:   52:#define sensorSupply (passing_sensor_sensorSupply->CB_current_value)
        -:   53:#define passing (passing_sensor_passing->CB_current_value)
        -:   54:#define status_act_prod (passing_sensor_status_act_prod->CB_current_value)
        -:   55:#define m11 (passing_sensor_m11->CB_current_value)
        -:   56:#define m12 (passing_sensor_m12->CB_current_value)
        -:   57:#define m13 (passing_sensor_m13->CB_current_value)
        -:   58:#define m14 (passing_sensor_m14->CB_current_value)
        -:   59:#define m21 (passing_sensor_m21->CB_current_value)
        -:   60:#define m22 (passing_sensor_m22->CB_current_value)
        -:   61:#define m23 (passing_sensor_m23->CB_current_value)
        -:   62:#define m24 (passing_sensor_m24->CB_current_value)
        -:   63:#define m31 (passing_sensor_m31->CB_current_value)
        -:   64:#define m32 (passing_sensor_m32->CB_current_value)
        -:   65:#define m33 (passing_sensor_m33->CB_current_value)
        -:   66:#define m34 (passing_sensor_m34->CB_current_value)
        -:   67:#define m41 (passing_sensor_m41->CB_current_value)
        -:   68:#define m42 (passing_sensor_m42->CB_current_value)
        -:   69:#define m43 (passing_sensor_m43->CB_current_value)
        -:   70:#define m44 (passing_sensor_m44->CB_current_value)
        -:   71:#define px (passing_sensor_px->CB_current_value)
        -:   72:#define py (passing_sensor_py->CB_current_value)
        -:   73:#define pz (passing_sensor_pz->CB_current_value)
        -:   74:#define dx (passing_sensor_dx->CB_current_value)
        -:   75:#define dy (passing_sensor_dy->CB_current_value)
        -:   76:#define dz (passing_sensor_dz->CB_current_value)
        -:   77:#define detection (passing_sensor_detection->CB_current_value)
        -:   78:#define passingLogic (passing_sensor_passingLogic->CB_current_value)
        -:   79:#define d_passing (passing_sensor_d_passing->CB_current_value)
        -:   80:#define v_d_passing (passing_sensor_v_d_passing->CB_current_value)
        -:   81:
        -:   82:
        -:   83:/************************ Components offsets ************************/
        -:   84:
        -:   85:
        -:   86:/********************* Initialization function **********************/
        -:   87:
        1:   88:int _tri_chain__passing_sensor_init(void)
        -:   89:{
        1:   90:	(passing_sensor_sensorSupply)->CB_current_value = 1; /*sensorSupply*/
        1:   91:	(self.Float+0)->CB_current_value = 1.0; /*m11*/
        1:   92:	(self.Float+5)->CB_current_value = 1.0; /*m22*/
        1:   93:	(self.Float+10)->CB_current_value = 1.0; /*m33*/
        1:   94:	(self.Float+15)->CB_current_value = 1.0; /*m44*/
        1:   95:	(self.Bool+1)->CB_current_value = 1; /*passingLogic*/
        1:   96:	(self.Bool+3)->CB_current_value = 1; /*v_d_passing*/
        1:   97:	self.Bool+=4;
        1:   98:	self.Int+=1;
        1:   99:	self.Float+=22;
        -:  100:
        -:  101:
        1:  102:	return 0;
        -:  103:}
        -:  104:
        -:  105:
        -:  106:/************************ Behavior function *************************/
        -:  107:
        1:  108:int tri_chain__passing_sensor(void)
        -:  109:{
        -:  110:	static char *__comp_name = "tri_chain.passing_sensor";
        1:  111:	if (exec_term_node(self_num)) {
        -:  112:
        -:  113:		/*********************** Internals variables ************************/
        -:  114:
        1:  115:		passing_sensor_status_act_prod = self.Int+0;
        1:  116:		passing_sensor_m11 = self.Float+0;
        1:  117:		passing_sensor_m12 = self.Float+1;
        1:  118:		passing_sensor_m13 = self.Float+2;
        1:  119:		passing_sensor_m14 = self.Float+3;
        1:  120:		passing_sensor_m21 = self.Float+4;
        1:  121:		passing_sensor_m22 = self.Float+5;
        1:  122:		passing_sensor_m23 = self.Float+6;
        1:  123:		passing_sensor_m24 = self.Float+7;
        1:  124:		passing_sensor_m31 = self.Float+8;
        1:  125:		passing_sensor_m32 = self.Float+9;
        1:  126:		passing_sensor_m33 = self.Float+10;
        1:  127:		passing_sensor_m34 = self.Float+11;
        1:  128:		passing_sensor_m41 = self.Float+12;
        1:  129:		passing_sensor_m42 = self.Float+13;
        1:  130:		passing_sensor_m43 = self.Float+14;
        1:  131:		passing_sensor_m44 = self.Float+15;
        1:  132:		passing_sensor_px = self.Float+16;
        1:  133:		passing_sensor_py = self.Float+17;
        1:  134:		passing_sensor_pz = self.Float+18;
        1:  135:		passing_sensor_dx = self.Float+19;
        1:  136:		passing_sensor_dy = self.Float+20;
        1:  137:		passing_sensor_dz = self.Float+21;
        1:  138:		passing_sensor_detection = self.Bool+0;
        1:  139:		passing_sensor_passingLogic = self.Bool+1;
        1:  140:		passing_sensor_d_passing = self.Bool+2;
        1:  141:		passing_sensor_v_d_passing = self.Bool+3;
        -:  142:
        -:  143:		/********************* Pre-conditions execution *********************/
        -:  144:
        -:  145:		/*no Pre-conditions*/
        -:  146:
        -:  147:		/************************ Actor Myself init *************************/
        -:  148:
        1:  149:		setMyselfFor(self_num);
        -:  150:
        -:  151:		/************************ Behavior execution ************************/
        -:  152:
        -:  153:		{
        -:  154:			/* ----------------------------------------------------------------	*/
        -:  155:			/* Type : Model of Operative Behaviour					*/
        -:  156:			/* Category :  Sensors							*/
        -:  157:			/* Author : Dassault Systemes						*/
        -:  158:			/* Update date : June 2018							*/
        -:  159:			/* ----------------------------------------------------------------	*/
        -:  160:			/* This module simulates the bahaviour of a  passing sensor 		*/
        -:  161:			/*	for products.								*/
        -:  162:			/* This module is an "actor".						*/
        -:  163:			/* If it interacts with a product, this latter will acts on the	*/
        -:  164:			/*	detection variable .							*/
        -:  165:			/* -----------------------------------------------------------------	*/
        -:  166:
        -:  167:			/* -----------------------------------------------------------------	*/
        -:  168:			/* "cptpass" module can be dragged in rotation or translation.	*/
        -:  169:			/*	Then position and dimension variables can changed.		*/
        -:  170:			/*	Then theses variables must be initialized from the data 	*/
        -:  171:			/*	which are stored as parameters.					*/
        -:  172:			/* -----------------------------------------------------------------	*/
        -:  173:
        1:  174:			if (d_passing) passing = v_d_passing;
        -:  175:			else
        1:  176:				if ( sensorSupply ) passing=(detection ^ ! passingLogic);
    #####:  177:				else passing = 0;
        -:  178:
        1:  179:			detection=0;
        -:  180:		}
        -:  181:
        1:  182:		CB_post_bool(passing_sensor_passing);
        -:  183:
        -:  184:		/******************** Post-conditions execution *********************/
        -:  185:
        -:  186:		/*no Post-conditions*/
        -:  187:	}
        -:  188:
        -:  189:	/*************************** self update ****************************/
        -:  190:
        1:  191:	self.Bool += 4;
        1:  192:	self.Int += 1;
        1:  193:	self.Float += 22;
        -:  194:
        1:  195:	return 0;
        -:  196:}
        -:  197:
