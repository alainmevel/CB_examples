        -:    0:Source:axle_tri_cov.c
        -:    0:Graph:MinGW/axle_tri_cov.gcno
        -:    0:Data:MinGW/axle_tri_cov.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*2023-10-03T11:13:53-01:00*/
        -:    2:
        -:    3:/********************************************************************
        -:    4: * axle_tri_cov.c
        -:    5: * 
        -:    6: * generated by: plcgen 3.1.391
        -:    7: ********************************************************************/
        -:    8:
        -:    9:#include "cb_comp.h"
        -:   10:#include "cb_covs.h"
        -:   11:#include "iec_1131.h"
        -:   12:
        -:   13:#include "axle_tri.h"
        -:   14:
        -:   15:
        -:   16:
        -:   17:/**************************** Variables *****************************/
        -:   18:
        -:   19:CB_Index axle_tri__num = 0;
        -:   20:CB_Mem_Float *axle_tri_speed;
        -:   21:CB_Mem_Float *axle_tri_positionTranslat;
        -:   22:CB_Mem_Float *axle_tri_percentTranslat;
        -:   23:CB_Mem_Float *axle_tri_incTranslat;
        -:   24:CB_Mem_Bool *axle_tri_firstCycle;
        -:   25:CB_Mem_Float *axle_tri_nbCyclePerSec;
        -:   26:CB_Mem_Float *axle_tri_initTranslat;
        -:   27:CB_Mem_Float *axle_tri_maxTranslat;
        -:   28:CB_Mem_Float *axle_tri_minTranslat;
        -:   29:CB_Mem_Bool *axle_tri_d_locking;
        -:   30:CB_Mem_Bool *axle_tri_v_d_locking;
        -:   31:
        -:   32:/**************************** Variables *****************************/
        -:   33:
        -:   34:#define speed (axle_tri_speed->CB_current_value)
        -:   35:#define positionTranslat (axle_tri_positionTranslat->CB_current_value)
        -:   36:#define percentTranslat (axle_tri_percentTranslat->CB_current_value)
        -:   37:#define incTranslat (axle_tri_incTranslat->CB_current_value)
        -:   38:#define firstCycle (axle_tri_firstCycle->CB_current_value)
        -:   39:#define nbCyclePerSec (axle_tri_nbCyclePerSec->CB_current_value)
        -:   40:#define initTranslat (axle_tri_initTranslat->CB_current_value)
        -:   41:#define maxTranslat (axle_tri_maxTranslat->CB_current_value)
        -:   42:#define minTranslat (axle_tri_minTranslat->CB_current_value)
        -:   43:#define d_locking (axle_tri_d_locking->CB_current_value)
        -:   44:#define v_d_locking (axle_tri_v_d_locking->CB_current_value)
        -:   45:
        -:   46:
        -:   47:/************************ Components offsets ************************/
        -:   48:
        -:   49:
        -:   50:/********************* Initialization function **********************/
        -:   51:
        1:   52:int _tri_chain__axle_tri_init(void)
        -:   53:{
        1:   54:	(self.Float+2)->CB_current_value = 10000.0; /*maxTranslat*/
        1:   55:	self.Bool+=3;
        1:   56:	self.Float+=4;
        -:   57:
        -:   58:
        1:   59:	return 0;
        -:   60:}
        -:   61:
        -:   62:
        -:   63:/************************ Behavior function *************************/
        -:   64:
        1:   65:int tri_chain__axle_tri(void)
        -:   66:{
        -:   67:	static char *__comp_name = "tri_chain.axle_tri";
        1:   68:	if (exec_term_node(self_num)) {
        -:   69:
        -:   70:		/*********************** Internals variables ************************/
        -:   71:
        1:   72:		axle_tri_firstCycle = self.Bool+0;
        1:   73:		axle_tri_nbCyclePerSec = self.Float+0;
        1:   74:		axle_tri_initTranslat = self.Float+1;
        1:   75:		axle_tri_maxTranslat = self.Float+2;
        1:   76:		axle_tri_minTranslat = self.Float+3;
        1:   77:		axle_tri_d_locking = self.Bool+1;
        1:   78:		axle_tri_v_d_locking = self.Bool+2;
        -:   79:
        -:   80:		/********************* Pre-conditions execution *********************/
        -:   81:
        -:   82:		/*no Pre-conditions*/
        -:   83:
        -:   84:		/************************ Behavior execution ************************/
        -:   85:
        -:   86:		{
        -:   87:			/* ----------------------------------------------------------------	*/
        -:   88:			/* Type : Model of Operative Behaviour					*/
        -:   89:			/* Category :  Actuators							*/
        -:   90:			/* Author : Dassault Systemes						*/
        -:   91:			/* Update date : June 2018							*/
        -:   92:			/* ----------------------------------------------------------------	*/
        -:   93:			/* This module simulates the behaviour of a limited axle to which a	*/
        -:   94:			/* to which a translation speed is imparted.				*/
        -:   95:			/* ----------------------------------------------------------------	*/
        -:   96:
        -:   97:			/* ----------------------------------------------------------------	*/
        -:   98:			/* Initialise the position of the axle for the first step of 		*/
        -:   99:			/* simulation.								*/
        -:  100:			/* ----------------------------------------------------------------	*/
        1:  101:			if ( ! firstCycle) {
        1:  102:				if (initTranslat > maxTranslat) positionTranslat = maxTranslat;
        1:  103:				else if (initTranslat < minTranslat) positionTranslat = minTranslat;
        1:  104:					else positionTranslat = initTranslat;
        1:  105:				firstCycle = 1;
        -:  106:			}
        -:  107:
        -:  108:			/* -----------------------------------------------------------------	*/
        -:  109:			/* Translation of the axle							*/
        -:  110:			/* -----------------------------------------------------------------	*/
        -:  111:
        -:  112:			/* compute the increment of translation according to the simulation clock	*/
        1:  113:			incTranslat = 0.0;
        1:  114:			if (! d_locking) {
        1:  115:				nbCyclePerSec = CLOCK_PERIOD/1000000;
        1:  116:				incTranslat = speed * nbCyclePerSec;
        -:  117:			}
        1:  118:			positionTranslat = positionTranslat + incTranslat;
        -:  119:
        -:  120:			/* -----------------------------------------------------------------	*/
        -:  121:			/* Limitation of the translation of the axle 				*/
        -:  122:			/* -----------------------------------------------------------------	*/
        1:  123:			if (positionTranslat > maxTranslat) {
    #####:  124:				incTranslat -= positionTranslat - maxTranslat;
    #####:  125:				positionTranslat = maxTranslat;
        -:  126:			}
        1:  127:			if (positionTranslat < minTranslat) {
    #####:  128:				incTranslat -= positionTranslat - minTranslat;
    #####:  129:				positionTranslat = minTranslat;
        -:  130:			}
        -:  131:
        -:  132:			/* ----------------------------------------------------------------- */
        -:  133:			/* Compute the percent between the position and the limit		*/
        -:  134:			/* ----------------------------------------------------------------- */
        -:  135:
        1:  136:			percentTranslat = (100/(maxTranslat - minTranslat)) * (positionTranslat - minTranslat)  ;
        -:  137:					
        -:  138:
        -:  139:
        -:  140:
        -:  141:		}
        -:  142:
        1:  143:		CB_post_float(axle_tri_positionTranslat);
        1:  144:		CB_post_float(axle_tri_percentTranslat);
        1:  145:		CB_post_float(axle_tri_incTranslat);
        -:  146:
        -:  147:		/******************** Post-conditions execution *********************/
        -:  148:
        -:  149:		/*no Post-conditions*/
        -:  150:	}
        -:  151:
        -:  152:	/*************************** self update ****************************/
        -:  153:
        1:  154:	self.Bool += 3;
        1:  155:	self.Float += 4;
        -:  156:
        1:  157:	return 0;
        -:  158:}
        -:  159:
